#!/usr/bin/python
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

from __future__ import (absolute_import, division, print_function)
__metaclass__ = type

DOCUMENTATION = r'''
---
module: technitium_dns_publish_all_keys
short_description: Publish all generated DNSSEC private keys in a zone
version_added: "0.4.0"
author: Frank Muise (@effectivelywild)
description:
  - Publishes all private keys that have state set as Generated by adding associated DNSKEY records for them.
  - Once published, the keys will be automatically activated.
  - For Key Signing Keys (KSK), once the state is set to Ready you can then safely replace the old DS record from the parent zone with a new DS key.
  - Once the new DS record is published at the parent zone, the DNS server will automatically detect and set the KSK state to Active.
  - The zone must already be signed with DNSSEC.
seealso:
  - module: effectivelywild.technitium_dns.technitium_dns_add_private_key
    description: Add DNSSEC private key to a zone
  - module: effectivelywild.technitium_dns.technitium_dns_get_dnssec_properties
    description: Get DNSSEC properties for a zone
options:
  api_port:
    description:
      - Port for the Technitium DNS API. Defaults to 5380
    required: false
    type: int
    default: 5380
  api_token:
    description:
      - API token for authentication
    required: true
    type: str
  api_url:
    description:
      - Base URL for the Technitium DNS API
    required: true
    type: str
  validate_certs:
    description:
      - Whether to validate SSL certificates when making API requests.
    required: false
    type: bool
    default: true
  zone:
    description:
      - The name of the primary zone to publish keys for
    required: true
    type: str
'''

EXAMPLES = r'''
- name: Publish all generated keys in example.com
  technitium_dns_publish_all_keys:
    api_url: "http://localhost"
    api_token: "myapitoken"
    zone: "example.com"

- name: Publish all generated keys with custom API port
  technitium_dns_publish_all_keys:
    api_url: "http://localhost"
    api_port: 5380
    api_token: "myapitoken"
    zone: "example.com"
'''

RETURN = r'''
changed:
    description: Whether the module made changes
    type: bool
    returned: always
    sample: true
failed:
    description: Whether the module failed
    type: bool
    returned: always
    sample: false
msg:
    description: Human readable message describing the result
    type: str
    returned: always
    sample: "Published 2 generated keys in zone 'example.com'"
api_response:
    description: Full API response from Technitium DNS server
    type: dict
    returned: always
    sample: {
        "status": "ok"
    }
published_keys_count:
    description: Number of keys that were published
    type: int
    returned: success
    sample: 2
generated_keys_before:
    description: List of keys that were in Generated state before publishing
    type: list
    returned: success
    sample: [
        {
            "keyTag": 12345,
            "keyType": "ZoneSigningKey",
            "algorithm": "ECDSAP256SHA256"
        }
    ]
'''

from ansible_collections.effectivelywild.technitium_dns.plugins.module_utils.technitium import TechnitiumModule


class PublishAllKeysModule(TechnitiumModule):
    argument_spec = dict(
        **TechnitiumModule.get_common_argument_spec(),
        zone=dict(type='str', required=True),
    )

    module_kwargs = dict(
        supports_check_mode=True
    )

    def get_generated_keys(self, dnssec_props):
        """Get list of keys in Generated state"""
        private_keys = dnssec_props.get('dnssecPrivateKeys', [])
        generated_keys = []

        for key in private_keys:
            if key.get('state', '').lower() == 'generated':
                generated_keys.append({
                    'keyTag': key.get('keyTag'),
                    'keyType': key.get('keyType'),
                    'algorithm': key.get('algorithm'),
                    'state': key.get('state')
                })

        return generated_keys

    def run(self):
        zone = self.params['zone']

        # Get DNSSEC properties to validate zone is signed
        dnssec_props = self.get_dnssec_properties(zone)
        dnssec_status = dnssec_props.get('dnssecStatus', '').lower()

        if dnssec_status == 'unsigned':
            self.fail_json(msg=f"Zone '{zone}' is not signed with DNSSEC. Cannot publish keys in unsigned zone.")

        if dnssec_status not in ['signed', 'signedwithnsec', 'signedwithnsec3']:
            self.fail_json(msg=f"Zone '{zone}' has unexpected DNSSEC status: {dnssec_status}")

        # Check for keys in Generated state
        generated_keys = self.get_generated_keys(dnssec_props)

        if not generated_keys:
            self.exit_json(
                changed=False,
                msg=f"No generated keys found in zone '{zone}' - nothing to publish",
                api_response={'status': 'ok', 'msg': 'No generated keys found'},
                published_keys_count=0,
                generated_keys_before=[]
            )

        if self.check_mode:
            self.exit_json(
                changed=True,
                msg=f"Would publish {len(generated_keys)} generated keys in zone '{zone}' (check mode)",
                api_response={},
                published_keys_count=len(generated_keys),
                generated_keys_before=generated_keys
            )

        # Publish all generated keys via API
        query = {
            'zone': zone
        }

        data = self.request('/api/zones/dnssec/properties/publishAllPrivateKeys', params=query, method='POST')
        status = data.get('status')
        error_msg = data.get('errorMessage') or data.get('error') or data.get('message') or "Unknown error"

        if status != 'ok':
            # Handle the specific case where no generated keys are found
            if 'no generated private keys were found' in error_msg.lower():
                # This shouldn't happen since we checked above, but handle it gracefully
                self.exit_json(
                    changed=False,
                    msg=f"No generated keys found in zone '{zone}' - nothing to publish",
                    api_response=data,
                    published_keys_count=0,
                    generated_keys_before=[]
                )
            else:
                self.fail_json(msg=f"Technitium API error: {error_msg}", api_response=data)

        result_msg = f"Published {len(generated_keys)} generated keys in zone '{zone}'"

        exit_kwargs = {
            'changed': True,
            'msg': result_msg,
            'api_response': data,
            'published_keys_count': len(generated_keys),
            'generated_keys_before': generated_keys
        }

        self.exit_json(**exit_kwargs)


if __name__ == '__main__':
    module = PublishAllKeysModule()
    module.run()
