---
name: CI

on:                    
  pull_request:           # Every time someone makes a PR
    paths-ignore:
      - '**.md'           # Skip markdown files
      - '**.rst'          # Skip reStructuredText files
      - 'LICENSE'         # Skip license changes
      - '.gitignore'      # Skip gitignore changes
      - 'docs/**'         # Skip docs folder changes
  push:
    branches: [main]      # Test code when merged to main
    paths-ignore:
      - '**.md'           # Skip markdown files
      - '**.rst'          # Skip reStructuredText files  
      - 'LICENSE'         # Skip license changes
      - '.gitignore'      # Skip gitignore changes
      - 'docs/**'         # Skip docs folder changes
  workflow_dispatch:      # Manual trigger button in GitHub

jobs:
  sanity:
    name: Sanity (${{ matrix.ansible }})
    runs-on: ubuntu-latest
    # Skip if this is a docs-only commit
    if: ${{ !startsWith(github.event.head_commit.message, 'docs:') }}
    strategy:
      matrix:
        ansible:
          - stable-2.19
          - stable-2.18
          - stable-2.17
          - devel
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: ansible_collections/effectivelywild/technitium_dns

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install ansible-base (${{ matrix.ansible }})
      run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

    - name: Install dependencies
      run: pip install -r ./tests/requirements.txt
      working-directory: ansible_collections/effectivelywild/technitium_dns

    - name: Run sanity tests
      run: |
        ansible-test sanity --docker -v --color --coverage --exclude .github/
      working-directory: ansible_collections/effectivelywild/technitium_dns

    - name: Generate coverage report
      run: ansible-test coverage xml -v --requirements --group-by command --group-by version
      working-directory: ansible_collections/effectivelywild/technitium_dns

    - uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  integration:
    runs-on: ubuntu-latest
    name: Integration (${{ matrix.ansible }}+py${{ matrix.python }})
    # Skip if this is a docs-only commit
    if: ${{ !startsWith(github.event.head_commit.message, 'docs:') }}
    strategy:
      fail-fast: false
      matrix:
        ansible:
          - stable-2.17
          - stable-2.18
          - stable-2.19
          - devel
        python:
          - '3.10'
          - '3.11'
          - '3.12'
          - '3.13'
        # exclude not supported combinations
        exclude:
          - ansible: devel
            python: '3.10'
          - ansible: devel
            python: '3.11'
          - ansible: devel
            python: '3.12'
          - ansible: stable-2.19
            python: '3.10'
          - ansible: stable-2.18
            python: '3.10'
          - ansible: stable-2.17
            python: '3.13'
    steps:
      - name: Check out code
        uses: actions/checkout@v5
        with:
         path: ansible_collections/effectivelywild/technitium_dns

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install ansible-base (${{ matrix.ansible }})
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      - name: Install collections
        run: |
          ansible-galaxy collection install community.docker
          ansible-galaxy collection build .
          ansible-galaxy collection install effectivelywild-technitium_dns-*.tar.gz
        working-directory: ./ansible_collections/effectivelywild/technitium_dns

      - name: Install python dependencies
        run: pip install -r tests/requirements.txt --upgrade-strategy eager --disable-pip-version-check
        working-directory: ./ansible_collections/effectivelywild/technitium_dns

      - name: Set unique identifiers for parallel jobs
        run: |
          # Create unique identifiers to avoid conflicts between parallel jobs
          JOB_ID="${{ matrix.ansible }}-py${{ matrix.python }}"
          SAFE_JOB_ID=$(echo "$JOB_ID" | sed 's/[^a-zA-Z0-9]//g')
          RUN_ID="${{ github.run_id }}"
          
          echo "JOB_ID=${SAFE_JOB_ID}" >> $GITHUB_ENV
          echo "TESTING_SUFFIX=${SAFE_JOB_ID}-${RUN_ID}.test" >> $GITHUB_ENV
          echo "CONTAINER_SUFFIX=-${SAFE_JOB_ID}-${RUN_ID}" >> $GITHUB_ENV
          echo "TOKEN_FILE_1=/tmp/technitium01_token_${SAFE_JOB_ID}_${RUN_ID}" >> $GITHUB_ENV
          echo "TOKEN_FILE_2=/tmp/technitium02_token_${SAFE_JOB_ID}_${RUN_ID}" >> $GITHUB_ENV
          echo "TOKEN_FILE_3=/tmp/technitium03_token_${SAFE_JOB_ID}_${RUN_ID}" >> $GITHUB_ENV
          
          # Calculate unique ports using hash of job ID (guaranteed unique)
          JOB_HASH=$(echo "${SAFE_JOB_ID}" | shasum | cut -c1-4)
          PORT_OFFSET=$((0x${JOB_HASH} % 500 + 1))
          
          echo "PORT_OFFSET=${PORT_OFFSET}" >> $GITHUB_ENV
          echo "HTTP_PORT_1=$((6000 + PORT_OFFSET * 10 + 1))" >> $GITHUB_ENV
          echo "HTTP_PORT_2=$((6000 + PORT_OFFSET * 10 + 2))" >> $GITHUB_ENV
          echo "HTTP_PORT_3=$((6000 + PORT_OFFSET * 10 + 2))" >> $GITHUB_ENV
          echo "HTTPS_PORT_1=$((50000 + PORT_OFFSET * 10 + 1))" >> $GITHUB_ENV  
          echo "HTTPS_PORT_2=$((50000 + PORT_OFFSET * 10 + 2))" >> $GITHUB_ENV
          echo "HTTPS_PORT_3=$((50000 + PORT_OFFSET * 10 + 2))" >> $GITHUB_ENV


      - name: Setup testing environment
        run: ansible-playbook roles/test_utils/playbooks/run_setup_testing_env.yml
        working-directory: ./ansible_collections/effectivelywild/technitium_dns


      - name: Get Technitium server values
        id: get_server_values
        run: |
          # Read token from the exported file
          API_TOKEN_1=$(cat "${TOKEN_FILE_1}")
          echo "api_token_1=$API_TOKEN_1" >> $GITHUB_OUTPUT
          API_TOKEN_2=$(cat "${TOKEN_FILE_2}")
          echo "api_token_2=$API_TOKEN_2" >> $GITHUB_OUTPUT
          API_TOKEN_3=$(cat "${TOKEN_FILE_3}")
          echo "api_token_3=$API_TOKEN_3" >> $GITHUB_OUTPUT

          # Get container IP for notify_name_server using dynamic container name
          CONTAINER_NAME="technitium01${CONTAINER_SUFFIX}"
          CONTAINER_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$CONTAINER_NAME")
          echo "technitium01_ip=$CONTAINER_IP" >> $GITHUB_OUTPUT

      - name: Create integration config
        run: |
          cat > tests/integration/integration_config.yml << EOF
          technitium_api_url_1: http://localhost
          technitium_api_token_1: ${{ steps.get_server_values.outputs.api_token_1 }}
          technitium_api_port_1: ${HTTP_PORT_1}

          technitium_api_url_2: http://localhost
          technitium_api_token_2: ${{ steps.get_server_values.outputs.api_token_2 }}
          technitium_api_port_2: ${HTTP_PORT_2}

          technitium_api_url_3: http://localhost
          technitium_api_token_3: ${{ steps.get_server_values.outputs.api_token_3 }}
          technitium_api_port_3: ${HTTP_PORT_3}
    
          validate_certs: false

          # Notify Name Server (technitium01), used for Zone testing
          notify_name_server: ${{ steps.get_server_values.outputs.technitium01_ip }}

          # Debugging options
          debug: false

          # Testing domain - unique per job to avoid conflicts
          testing_suffix: ${TESTING_SUFFIX}
          EOF
          cat tests/integration/integration_config.yml
        working-directory: ./ansible_collections/effectivelywild/technitium_dns

      - name: Run integration tests that don't require KSK in Ready state
        run: |
          ansible-test integration --color --retry-on-error --continue-on-error --diff --python ${{ matrix.python }} --coverage --requirements \
          --exclude technitium_dns_update_dnskey_ttl 
        working-directory: ./ansible_collections/effectivelywild/technitium_dns

      - name: Run integration tests that require specific key states
        run: |
          ansible-test integration --color --retry-on-error --continue-on-error --diff --python ${{ matrix.python }} --coverage --requirements \
          technitium_dns_update_dnskey_ttl 
        working-directory: ./ansible_collections/effectivelywild/technitium_dns

      - name: Generate coverage report
        run: ansible-test coverage xml -v --requirements --group-by command --group-by version
        working-directory: ./ansible_collections/effectivelywild/technitium_dns

      - uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
