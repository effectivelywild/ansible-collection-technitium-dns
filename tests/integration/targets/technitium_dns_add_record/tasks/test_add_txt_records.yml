---
# TXT Record Tests

- name: "Define TXT test records"
  ansible.builtin.set_fact:
    add_txt_test_records:
      - { idx: 1, name: basic-txt,     zone: "{{ primary_zone_name }}", text: "simple text value" }
      - { idx: 2, name: longttl-txt,   zone: "{{ primary_zone_name }}", text: "v=spf1 include:example.com ~all", ttl: 7200 }
      - { idx: 3, name: comment-txt,   zone: "{{ primary_sec_zone_name }}", text: "multi part string example", splitText: true, ttl: 3600, comments: "Sec zone TXT with comment" }
    # Overwrite test record (will overwrite txt-basic)
    overwrite_txt_record:
      idx: 1
      name: txt-basic
      zone: "{{ primary_zone_name }}"
      text: "Overwritten TXT value"
      comments: "Overwrite test comment"

# Phase 1: Check mode - Add TXT records
- name: "Check mode - Add TXT records"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: TXT
    text: "{{ rec.text }}"
    splitText: "{{ rec.splitText | default(omit) }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
  check_mode: true
  loop: "{{ add_txt_test_records }}"
  loop_control:
    loop_var: rec
    label: "check_mode: {{ rec.name }}.{{ rec.zone }}"
  register: plan_txt_results

- name: "Assert all TXT plan operations report changed"
  ansible.builtin.assert:
    that:
      - (plan_txt_results.results | map(attribute='changed') | list | unique) == [ true ]

# Phase 2: external verify absence via get_records
- name: "Verify check_mode didn't add records"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
  loop: "{{ add_txt_test_records }}"
  loop_control:
    loop_var: rec
    label: "absent: {{ rec.name }}.{{ rec.zone }}"
  ignore_errors: true
  register: absent_get_txt_results

- name: "Assert no records were found"
  ansible.builtin.assert:
    that:
      - (absent_get_txt_results.results | map(attribute='failed') | list | unique) == [ true ]
    quiet: true

# Phase 3: real creation
- name: "Add TXT records"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: TXT
    text: "{{ rec.text }}"
    splitText: "{{ rec.splitText | default(omit) }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
  loop: "{{ add_txt_test_records }}"
  loop_control:
    loop_var: rec
    label: "add: {{ rec.name }}.{{ rec.zone }}"
  register: create_txt_results

- name: "Assert TXT creations changed"
  ansible.builtin.assert:
    that:
      - (create_txt_results.results | map(attribute='changed') | list | unique) == [ true ]

# Phase 4: external verify presence via get_records
- name: "Verify records were created"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
  loop: "{{ add_txt_test_records }}"
  loop_control:
    loop_var: rec
    label: "get: {{ rec.name }}.{{ rec.zone }}"
  register: present_get_txt_results

- name: "Debug verification results"
  debug:
    msg: "Record {{ item.rec.name }}.{{ item.rec.zone }}: status={{ item.api_response.status }}, changed={{ item.changed }}"
  loop: "{{ present_get_txt_results.results }}"
  loop_control:
    label: "debug: {{ item.rec.name }}.{{ item.rec.zone }}"

- name: "Assert records were found successfully"
  ansible.builtin.assert:
    that:
      - (present_get_txt_results.results | map(attribute='api_response') | map(attribute='status') | list | unique) == [ "ok" ]
    quiet: true

- name: "Assert TXT record parameters match request (text, splitText, ttl, comments)"
  ansible.builtin.assert:
    that:
      - >-
        ((item.records | default([])
           | selectattr('type','equalto','TXT')
           | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
           | list | first).rData.text) == item.rec.text
      - >-
        ('splitText' not in item.rec) or (
          (
            ((item.records | default([])
               | selectattr('type','equalto','TXT')
               | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
               | list | first).rData.splitText | default(false)) == (item.rec.splitText | default(false))
          )
        or (
          (item.rec.splitText | default(false) | bool) and
          (item.rec.text | length) <= 255 and
          (((item.records | default([])
            | selectattr('type','equalto','TXT')
            | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
            | list | first).rData.characterStrings | length) == 1) and
          (((item.records | default([])
            | selectattr('type','equalto','TXT')
            | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
            | list | first).rData.splitText | default(false)) == false)
          )
        )
      - >-
        ('ttl' not in item.rec) or (
          ((item.records | default([])
             | selectattr('type','equalto','TXT')
             | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
             | list | first).ttl | int) == (item.rec.ttl | int)
        )
      - >-
        ('comments' not in item.rec) or (
          ((item.records | default([])
            | selectattr('type','equalto','TXT')
            | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
            | list | first).comments | default(item.rec.comments)) == item.rec.comments
        )
    quiet: true
  loop: "{{ present_get_txt_results.results }}"
  loop_control:
    label: "Params: {{ item.rec.name }}.{{ item.rec.zone }}"

# Phase 5: Check mode - re-plan (no change)
- name: "Check mode - Re-add TXT records"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: TXT
    text: "{{ rec.text }}"
    splitText: "{{ rec.splitText | default(omit) }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
  check_mode: true
  loop: "{{ add_txt_test_records }}"
  loop_control:
    loop_var: rec
    label: "check_mode: {{ rec.name }}.{{ rec.zone }}"
  register: replan_txt_results

- name: "Assert TXT re-plan no changes"
  ansible.builtin.assert:
    that:
      - (replan_txt_results.results | map(attribute='changed') | list | unique) == [ false ]

# Phase 6: idempotency check (no change)
- name: "Idempotency - Re-add TXT records"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: TXT
    text: "{{ rec.text }}"
    splitText: "{{ rec.splitText | default(omit) }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
  loop: "{{ add_txt_test_records }}"
  loop_control:
    loop_var: rec
    label: "idempotency: {{ rec.name }}.{{ rec.zone }}"
  register: recreate_txt_results

- name: "Assert TXT re-create no changes"
  ansible.builtin.assert:
    that:
      - (recreate_txt_results.results | map(attribute='changed') | list | unique) == [ false ]

# Phase 7: overwrite tests
- name: "Overwrite TXT record (txt-basic) with new values"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ overwrite_txt_record.name }}.{{ overwrite_txt_record.zone }}"
    zone: "{{ overwrite_txt_record.zone }}"
    type: TXT
    text: "{{ overwrite_txt_record.text }}"
    comments: "{{ overwrite_txt_record.comments }}"
    overwrite: true
  register: overwrite_txt_result

- name: "Debug overwrite result"
  debug:
    msg: "Overwrite {{ overwrite_txt_record.name }}.{{ overwrite_txt_record.zone }}: changed={{ overwrite_txt_result.changed }}"

- name: "Assert overwrite operation reports changed"
  ansible.builtin.assert:
    that:
      - overwrite_txt_result.changed

- name: "Fetch overwritten TXT record for presence (get_records)"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ overwrite_txt_record.name }}.{{ overwrite_txt_record.zone }}"
    zone: "{{ overwrite_txt_record.zone }}"
  register: overwritten_txt_get_result

- name: "Debug overwritten record"
  debug:
    msg: "Get overwritten {{ overwrite_txt_record.name }}.{{ overwrite_txt_record.zone }}: status={{ overwritten_txt_get_result.api_response.status }}"

- name: "Assert overwritten TXT record has new values"
  ansible.builtin.assert:
    that:
      - >-
        (overwritten_txt_get_result.records | default([])
         | selectattr('type','equalto','TXT')
         | selectattr('name','equalto', (overwrite_txt_record.name ~ '.' ~ overwrite_txt_record.zone))
         | list | first).rData.text == overwrite_txt_record.text
      - >-
        (overwritten_txt_get_result.records | default([])
         | selectattr('type','equalto','TXT')
         | selectattr('name','equalto', (overwrite_txt_record.name ~ '.' ~ overwrite_txt_record.zone))
         | list | first).comments == overwrite_txt_record.comments

# Phase 8: negative tests (TXT specific)
- name: "Negative test - TXT missing text"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "missing-text.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: TXT
  register: neg_txt_missing_text
  ignore_errors: true

- name: "Debug negative test - missing text"
  debug:
    msg: "Missing text test: failed={{ neg_txt_missing_text.failed }}, msg={{ neg_txt_missing_text.msg | default('') }}"

- name: Assert failure of TXT missing text
  ansible.builtin.assert:
    that:
      - neg_txt_missing_text.failed
      - "'text' in (neg_txt_missing_text.msg | default(''))"

- name: "Negative test - TXT unsupported param (ipAddress)"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "bad-param-txt.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: TXT
    text: "some text"
    ipAddress: 198.51.100.10
  register: neg_txt_bad_param
  ignore_errors: true

- name: "Debug negative test - unsupported param"
  debug:
    msg: "Bad param test: failed={{ neg_txt_bad_param.failed }}, msg={{ neg_txt_bad_param.msg | default('') }}"

- name: Assert failure of TXT unsupported param
  ansible.builtin.assert:
    that:
      - neg_txt_bad_param.failed
      - "'ipAddress' in (neg_txt_bad_param.msg | default(''))"

- name: "Negative test - TXT invalid API token"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: BADTOKEN
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "bad-token-txt.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: TXT
    text: "token test"
  register: neg_txt_bad_token
  ignore_errors: true

- name: "Debug negative test - invalid token"
  debug:
    msg: "Bad token test: failed={{ neg_txt_bad_token.failed }}, msg={{ neg_txt_bad_token.msg | default('') }}"

- name: Assert failure of TXT invalid API token
  ansible.builtin.assert:
    that:
      - neg_txt_bad_token.failed
      - "'Invalid token' in (neg_txt_bad_token.msg)"
