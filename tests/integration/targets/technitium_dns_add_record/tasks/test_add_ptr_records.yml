---
# PTR Record Tests

- name: "Define PTR test records"
  ansible.builtin.set_fact:
    add_ptr_test_records:
      # Basic PTR no ttl/comment
      - { idx: 1, name: ptr-basic, zone: "{{ primary_zone_name }}", ptrName: host1.example.net, }
      # PTR with ttl only
      - { idx: 2, name: ptr-ttl, zone: "{{ primary_zone_name }}", ptrName: host2.example.net, ttl: 3600 }
      # PTR with ttl + comments in secondary zone
      - { idx: 3, name: ptr-meta, zone: "{{ primary_sec_zone_name }}", ptrName: host3.example.net, ttl: 7200, comments: "PTR with comment" }
    # Overwrite test record (will overwrite ptr-basic)
    overwrite_ptr_record:
      idx: 1
      name: ptr-basic
      zone: "{{ primary_zone_name }}"
      ptrName: overwrite-host.example.net
      comments: "Overwrite test comment"

# Phase 1: Check mode
- name: "Check mode - Add PTR records"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: PTR
    ptrName: "{{ rec.ptrName }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
  check_mode: true
  loop: "{{ add_ptr_test_records }}"
  loop_control:
    loop_var: rec
    label: "check_mode: {{ rec.name }}.{{ rec.zone }}"
  register: plan_ptr_results

- name: "Assert change"
  ansible.builtin.assert:
    that:
      - (plan_ptr_results.results | map(attribute='changed') | list | unique) == [ true ]

# Phase 2: external verify absence via get_records
- name: "Verify check_mode didn't add records"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
  loop: "{{ add_ptr_test_records }}"
  loop_control:
    loop_var: rec
    label: "Get: {{ rec.name }}.{{ rec.zone }}"
  register: absent_get_ptr_results
  ignore_errors: true

- name: Debug absent_get_ptr_results
  ansible.builtin.debug:
    var: absent_get_ptr_results
  when: debug | default(false)

- name: "Assert no records were found"
  ansible.builtin.assert:
    that:
      - (absent_get_ptr_results.results | map(attribute='failed') | list | unique) == [ true ]

# Phase 3: real creation
- name: "Create PTR records"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: PTR
    ptrName: "{{ rec.ptrName }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
  loop: "{{ add_ptr_test_records }}"
  loop_control:
    loop_var: rec
    label: "Create: {{ rec.idx }}-{{ rec.name }}.{{ rec.zone }}"
  register: create_ptr_results

- name: "Assert creations changed"
  ansible.builtin.assert:
    that:
      - (create_ptr_results.results | map(attribute='changed') | list | unique) == [ true ]

# Phase 4: verify presence via get_records
- name: "Get PTR records"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
  loop: "{{ add_ptr_test_records }}"
  loop_control:
    loop_var: rec
    label: "Get: {{ rec.name }}.{{ rec.zone }}"
  register: present_get_ptr_results

- name: Debug present_get_ptr_results
  ansible.builtin.debug:
    var: present_get_ptr_results
  when: debug | default(false)

- name: "Assert records exist"
  ansible.builtin.assert:
    that: (present_get_ptr_results.results | map(attribute='api_response.status') | list | unique) == ['ok']
    quiet: true

- name: "Assert PTR record parameters match request"
  ansible.builtin.assert:
    that:
      - >-
        ((item.records | default([])
           | selectattr('type','equalto','PTR')
           | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
           | list | first).rData.ptrName) == item.rec.ptrName
      - >-
        ('ttl' not in item.rec) or (
          ((item.records | default([])
             | selectattr('type','equalto','PTR')
             | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
             | list | first).ttl | int) == (item.rec.ttl | int)
        )
      - >-
        ('comments' not in item.rec) or (
          ((item.records | default([])
             | selectattr('type','equalto','PTR')
             | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
             | list | first).comments | default(item.rec.comments)) == item.rec.comments
        )
    quiet: true
  loop: "{{ present_get_ptr_results.results }}"
  loop_control:
    label: "Params: {{ item.rec.name }}.{{ item.rec.zone }}"

# Phase 5: re-plan (no change)
- name: "Check mode: Re-add PTR records"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: PTR
    ptrName: "{{ rec.ptrName }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
  check_mode: true
  loop: "{{ add_ptr_test_records }}"
  loop_control:
    loop_var: rec
    label: "check_mode: {{ rec.name }}.{{ rec.zone }}"
  register: replan_ptr_results

- name: "Assert re-add had no changes"
  ansible.builtin.assert:
    that:
      - (replan_ptr_results.results | map(attribute='changed') | list | unique) == [ false ]

# Phase 6: re-run real (no change)
- name: "Idempotency: Re-run add PTR records"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: PTR
    ptrName: "{{ rec.ptrName }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
  loop: "{{ add_ptr_test_records }}"
  loop_control:
    loop_var: rec
    label: "Recreate: {{ rec.name }}.{{ rec.zone }}"
  register: rerun_ptr_results

- name: "Assert re-run no changes"
  ansible.builtin.assert:
    that:
      - (rerun_ptr_results.results | map(attribute='changed') | list | unique) == [ false ]

# Phase 7: overwrite tests
- name: "Overwrite PTR record (ptr-basic) with new values"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ overwrite_ptr_record.name }}.{{ overwrite_ptr_record.zone }}"
    zone: "{{ overwrite_ptr_record.zone }}"
    type: PTR
    ptrName: "{{ overwrite_ptr_record.ptrName }}"
    comments: "{{ overwrite_ptr_record.comments }}"
    overwrite: true
  register: overwrite_ptr_result

- name: "Assert overwrite operation reports changed"
  ansible.builtin.assert:
    that:
      - overwrite_ptr_result.changed

- name: "Fetch overwritten PTR record for presence (get_records)"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ overwrite_ptr_record.name }}.{{ overwrite_ptr_record.zone }}"
    zone: "{{ overwrite_ptr_record.zone }}"
  register: overwritten_ptr_get_result

- name: Debug overwritten_ptr_get_result
  ansible.builtin.debug:
    var: overwritten_ptr_get_result
  when: debug | default(false)

- name: "Assert overwritten PTR record has new values"
  ansible.builtin.assert:
    that:
      - >-
        (overwritten_ptr_get_result.records | default([])
         | selectattr('type','equalto','PTR')
         | selectattr('name','equalto', (overwrite_ptr_record.name ~ '.' ~ overwrite_ptr_record.zone))
         | list | first).rData.ptrName == overwrite_ptr_record.ptrName
      - >-
        (overwritten_ptr_get_result.records | default([])
         | selectattr('type','equalto','PTR')
         | selectattr('name','equalto', (overwrite_ptr_record.name ~ '.' ~ overwrite_ptr_record.zone))
         | list | first).comments == overwrite_ptr_record.comments

# Phase 8: negative tests
- name: "Negative: missing required ptrName"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "neg-missing-ptr.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: PTR
  register: neg_ptr_missing_ptrName
  ignore_errors: true

- name: Debug neg_ptr_missing_ptrName
  ansible.builtin.debug:
    var: neg_ptr_missing_ptrName
  when: debug | default(false)

- name: Assert failure of missing ptrName
  ansible.builtin.assert:
    that:
      - neg_ptr_missing_ptrName.failed
      - "'ptrName' in (neg_ptr_missing_ptrName.msg | default(''))"

- name: "Negative: unsupported param for PTR (ipAddress)"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "neg-badparam-ptr.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: PTR
    ptrName: unsupported.example.net.
    ipAddress: 192.0.2.250
  register: neg_ptr_bad_param
  ignore_errors: true
  
- name: Assert failure of unsupported param
  ansible.builtin.assert:
    that:
      - neg_ptr_bad_param.failed
      - "'ipAddress' in (neg_ptr_bad_param.msg | default(''))"

- name: "Negative: invalid API token"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: BADTOKEN
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "neg-badtoken-ptr.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: PTR
    ptrName: badtoken.example.net.
  register: neg_ptr_bad_token
  ignore_errors: true

- name: Assert failure of invalid API token
  ansible.builtin.assert:
    that:
      - neg_ptr_bad_token.failed
      - "'Invalid token' in (neg_ptr_bad_token.msg)"
