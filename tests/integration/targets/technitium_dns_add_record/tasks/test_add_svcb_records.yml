---
# SVCB Record Tests

- name: "Define SVCB test records"
  ansible.builtin.set_fact:
    add_svcb_test_records:
      # 1. Basic SVCB minimal required params
      - { idx: 1, name: svcb-basic, zone: "{{ primary_zone_name }}", svcPriority: 1, svcTargetName: "target-svcb1.{{ primary_zone_name }}", svcParams: "alpn|h2" }
      # 2. SVCB with both IPv4/IPv6 hints and multiple params (alpn + port) in signed zone
      - { idx: 2, name: svcb-hints, zone: "{{ primary_sec_zone_name }}", svcPriority: 5, svcTargetName: "target-svcb2.{{ primary_sec_zone_name }}", svcParams: "alpn|h2,h3|port|8443", autoIpv4Hint: true, autoIpv6Hint: true }
      # 3. SVCB with IPv4 hint only + ttl + comments
      - { idx: 3, name: svcb-meta, zone: "{{ primary_zone_name }}", svcPriority: 10, svcTargetName: "target-svcb3.{{ primary_zone_name }}", svcParams: "alpn|h3", autoIpv4Hint: true, ttl: 7200, comments: "SVCB with ttl & comment" }
    # Overwrite test record (will overwrite svcb-basic)
    overwrite_svcb_record:
      idx: 1
      name: svcb-basic
      zone: "{{ primary_zone_name }}"
      svcPriority: 99
      svcTargetName: "target-svcb99.{{ primary_zone_name }}"
      svcParams: "alpn|h3"
      ttl: 54321

# Phase 1: Check mode
- name: "Check mode - Add SVCB records"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: SVCB
    svcPriority: "{{ rec.svcPriority }}"
    svcTargetName: "{{ rec.svcTargetName }}"
    svcParams: "{{ rec.svcParams }}"
    autoIpv4Hint: "{{ rec.autoIpv4Hint | default(omit) }}"
    autoIpv6Hint: "{{ rec.autoIpv6Hint | default(omit) }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
  check_mode: true
  loop: "{{ add_svcb_test_records }}"
  loop_control:
    loop_var: rec
    label: "check_mode: {{ rec.name }}.{{ rec.zone }}"
  register: plan_svcb_results

- name: "Assert change"
  ansible.builtin.assert:
    that:
      - (plan_svcb_results.results | map(attribute='changed') | list | unique) == [ true ]

# Phase 2: external verify absence via get_records
- name: "Verify check_mode didn't add records"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
  loop: "{{ add_svcb_test_records }}"
  loop_control:
    loop_var: rec
    label: "Get: {{ rec.name }}.{{ rec.zone }}"
  register: absent_get_svcb_results
  ignore_errors: true

- name: Debug absent_get_svcb_results
  ansible.builtin.debug:
    var: absent_get_svcb_results
  when: debug | default(false)

- name: "Assert no records were found"
  ansible.builtin.assert:
    that:
      - (absent_get_svcb_results.results | map(attribute='failed') | list | unique) == [ true ]

# Phase 3: real creation
- name: "Create SVCB records"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: SVCB
    svcPriority: "{{ rec.svcPriority }}"
    svcTargetName: "{{ rec.svcTargetName }}"
    svcParams: "{{ rec.svcParams }}"
    autoIpv4Hint: "{{ rec.autoIpv4Hint | default(omit) }}"
    autoIpv6Hint: "{{ rec.autoIpv6Hint | default(omit) }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
  loop: "{{ add_svcb_test_records }}"
  loop_control:
    loop_var: rec
    label: "Create: {{ rec.idx }}-{{ rec.name }}.{{ rec.zone }}"
  register: create_svcb_results

- name: "Assert creations changed"
  ansible.builtin.assert:
    that:
      - (create_svcb_results.results | map(attribute='changed') | list | unique) == [ true ]

# Phase 4: verify presence via get_records
- name: "Get SVCB records"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
  loop: "{{ add_svcb_test_records }}"
  loop_control:
    loop_var: rec
    label: "Get: {{ rec.name }}.{{ rec.zone }}"
  register: present_get_svcb_results

- name: Debug present_get_svcb_results
  ansible.builtin.debug:
    var: present_get_svcb_results
  when: debug | default(false)

- name: "Assert records exist"
  ansible.builtin.assert:
    that: (present_get_svcb_results.results | map(attribute='api_response.status') | list | unique) == ['ok']
    quiet: true

- name: "Assert SVCB record parameters match request"
  ansible.builtin.assert:
    that:
      - >-
        ((item.records | default([])
           | selectattr('type','equalto','SVCB')
           | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
           | list | first).rData.svcPriority | int) == (item.rec.svcPriority | int)
      - >-
        ((item.records | default([])
           | selectattr('type','equalto','SVCB')
           | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
           | list | first).rData.svcTargetName) == item.rec.svcTargetName
    # Expect svcParams returned as structured mapping
      - >-
        (
        (item.records | default([])
          | selectattr('type','equalto','SVCB')
          | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
          | list | first).rData.svcParams
          | default((item.records | default([])
          | selectattr('type','equalto','SVCB')
          | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
          | list | first).rData.params)
        ) == dict((item.rec.svcParams.split('|')[::2]) | zip(item.rec.svcParams.split('|')[1::2]))
      - >-
         ('autoIpv4Hint' not in item.rec) or (
           ((item.records | default([])
              | selectattr('type','equalto','SVCB')
              | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
              | list | first).rData.autoIpv4Hint | string) == (item.rec.autoIpv4Hint | string)
         )
      - >-
        ('autoIpv6Hint' not in item.rec) or (
          ((item.records | default([])
             | selectattr('type','equalto','SVCB')
             | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
             | list | first).rData.autoIpv6Hint | string) == (item.rec.autoIpv6Hint | string)
        )
      - >-
        ('ttl' not in item.rec) or (
          ((item.records | default([])
             | selectattr('type','equalto','SVCB')
             | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
             | list | first).ttl | int) == (item.rec.ttl | int)
        )
      - >-
        ('comments' not in item.rec) or (
          ((item.records | default([])
             | selectattr('type','equalto','SVCB')
             | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
             | list | first).comments | default(item.rec.comments)) == item.rec.comments
        )
    quiet: true
  loop: "{{ present_get_svcb_results.results }}"
  loop_control:
    label: "Params: {{ item.rec.name }}.{{ item.rec.zone }}"

# Phase 5: re-plan (no change)
- name: "Check mode: Re-add SVCB records"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: SVCB
    svcPriority: "{{ rec.svcPriority }}"
    svcTargetName: "{{ rec.svcTargetName }}"
    svcParams: "{{ rec.svcParams }}"
    autoIpv4Hint: "{{ rec.autoIpv4Hint | default(omit) }}"
    autoIpv6Hint: "{{ rec.autoIpv6Hint | default(omit) }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
  check_mode: true
  loop: "{{ add_svcb_test_records }}"
  loop_control:
    loop_var: rec
    label: "check_mode: {{ rec.name }}.{{ rec.zone }}"
  register: replan_svcb_results

- name: "Assert re-add had no changes"
  ansible.builtin.assert:
    that:
      - (replan_svcb_results.results | map(attribute='changed') | list | unique) == [ false ]

# Phase 6: re-run real (no change)
- name: "Idempotency: Re-run add SVCB records"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: SVCB
    svcPriority: "{{ rec.svcPriority }}"
    svcTargetName: "{{ rec.svcTargetName }}"
    svcParams: "{{ rec.svcParams }}"
    autoIpv4Hint: "{{ rec.autoIpv4Hint | default(omit) }}"
    autoIpv6Hint: "{{ rec.autoIpv6Hint | default(omit) }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
  loop: "{{ add_svcb_test_records }}"
  loop_control:
    loop_var: rec
    label: "Recreate: {{ rec.name }}.{{ rec.zone }}"
  register: rerun_svcb_results

- name: "Assert re-run no changes"
  ansible.builtin.assert:
    that:
      - (rerun_svcb_results.results | map(attribute='changed') | list | unique) == [ false ]

# Phase 7: overwrite tests
- name: "Overwrite SVCB record (svcb-basic) with new values"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ overwrite_svcb_record.name }}.{{ overwrite_svcb_record.zone }}"
    zone: "{{ overwrite_svcb_record.zone }}"
    type: SVCB
    svcPriority: "{{ overwrite_svcb_record.svcPriority }}"
    svcTargetName: "{{ overwrite_svcb_record.svcTargetName }}"
    svcParams: "{{ overwrite_svcb_record.svcParams }}"
    ttl: "{{ overwrite_svcb_record.ttl }}"
    overwrite: true
  register: overwrite_svcb_result

- name: "Assert overwrite operation reports changed"
  ansible.builtin.assert:
    that:
      - overwrite_svcb_result.changed

- name: "Fetch overwritten SVCB record for presence (get_records)"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ overwrite_svcb_record.name }}.{{ overwrite_svcb_record.zone }}"
    zone: "{{ overwrite_svcb_record.zone }}"
  register: overwritten_svcb_get_result

- name: Debug overwritten_svcb_get_result
  ansible.builtin.debug:
    var: overwritten_svcb_get_result
  when: debug | default(false)

- name: "Assert overwritten SVCB record has new values"
  ansible.builtin.assert:
    that:
      - >-
        (overwritten_svcb_get_result.records | default([])
         | selectattr('type','equalto','SVCB')
         | selectattr('name','equalto', (overwrite_svcb_record.name ~ '.' ~ overwrite_svcb_record.zone))
         | list | first).rData.svcPriority | int == (overwrite_svcb_record.svcPriority | int)
      - >-
        (overwritten_svcb_get_result.records | default([])
         | selectattr('type','equalto','SVCB')
         | selectattr('name','equalto', (overwrite_svcb_record.name ~ '.' ~ overwrite_svcb_record.zone))
         | list | first).rData.svcTargetName == overwrite_svcb_record.svcTargetName
      - >-
        (overwritten_svcb_get_result.records | default([])
         | selectattr('type','equalto','SVCB')
         | selectattr('name','equalto', (overwrite_svcb_record.name ~ '.' ~ overwrite_svcb_record.zone))
         | list | first).rData.svcParams == dict((overwrite_svcb_record.svcParams.split('|')[::2]) | zip(overwrite_svcb_record.svcParams.split('|')[1::2]))
      - >-
        (overwritten_svcb_get_result.records | default([])
         | selectattr('type','equalto','SVCB')
         | selectattr('name','equalto', (overwrite_svcb_record.name ~ '.' ~ overwrite_svcb_record.zone))
         | list | first).ttl == overwrite_svcb_record.ttl

# Phase 8: negative tests
- name: "Negative: missing required svcParams"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "neg-missing-svcparams-svcb.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: SVCB
    svcPriority: 1
    svcTargetName: bad-svcb-missing.example.
  register: neg_svcb_missing_params
  ignore_errors: true

- name: Debug neg_svcb_missing_params
  ansible.builtin.debug:
    var: neg_svcb_missing_params
  when: debug | default(false)

- name: Assert failure of missing svcParams
  ansible.builtin.assert:
    that:
      - neg_svcb_missing_params.failed
      - "'svcParams' in (neg_svcb_missing_params.msg | default(''))"

- name: "Negative: unsupported param for SVCB (ipAddress)"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "neg-badparam-svcb.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: SVCB
    svcPriority: 1
    svcTargetName: badparam-svcb.example.
    svcParams: alpn|h2
    ipAddress: 192.0.2.201
  register: neg_svcb_bad_param
  ignore_errors: true
  
- name: Assert failure of unsupported param
  ansible.builtin.assert:
    that:
      - neg_svcb_bad_param.failed
      - "'ipAddress' in (neg_svcb_bad_param.msg | default(''))"

- name: "Negative: invalid API token"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: BADTOKEN
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "neg-badtoken-svcb.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: SVCB
    svcPriority: 1
    svcTargetName: badtoken-svcb.example.
    svcParams: alpn|h2
  register: neg_svcb_bad_token
  ignore_errors: true

- name: Assert failure of invalid API token
  ansible.builtin.assert:
    that:
      - neg_svcb_bad_token.failed
      - "'Invalid token' in (neg_svcb_bad_token.msg)"
