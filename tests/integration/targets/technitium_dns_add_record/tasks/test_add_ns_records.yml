---
# NS Record Tests

- name: "Define NS test records"
  ansible.builtin.set_fact:
    add_ns_test_records:
      # Basic NS without glue
      - { idx: 1, name: ns-basic, zone: "{{ primary_zone_name }}", nameServer: ns1.delegate-example.net }
      # NS with glue IPv4
      - { idx: 2, name: ns-glue4, zone: "{{ primary_zone_name }}", nameServer: ns4.delegate-example.net, glue: 192.0.2.44, ttl: 3600 }
      # NS with glue IPv6 + comment + expiryTtl in signed zone
      - { idx: 3, name: ns-glue6, zone: "{{ primary_sec_zone_name }}", nameServer: ns6.delegate-example.net, glue: 2001:db8::66, ttl: 7200, comments: "Glue v6 with comment", expiryTtl: 1800 }
    # Overwrite test record (will overwrite ns-basic)
    overwrite_ns_record:
      idx: 1
      name: ns-basic
      zone: "{{ primary_zone_name }}"
      nameServer: overwrite-ns.example.net
      comments: "Overwrite test comment"

# Phase 1: Check mode
- name: "Check mode - Add NS records"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: NS
    nameServer: "{{ rec.nameServer }}"
    glue: "{{ rec.glue | default(omit) }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
    expiryTtl: "{{ rec.expiryTtl | default(omit) }}"
  check_mode: true
  loop: "{{ add_ns_test_records }}"
  loop_control:
    loop_var: rec
    label: "check_mode: {{ rec.name }}.{{ rec.zone }}"
  register: plan_ns_results

- name: "Assert change"
  ansible.builtin.assert:
    that:
      - (plan_ns_results.results | map(attribute='changed') | list | unique) == [ true ]

# Phase 2: external verify absence via get_records
- name: "Verify check_mode didn't add records"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
  loop: "{{ add_ns_test_records }}"
  loop_control:
    loop_var: rec
    label: "Get: {{ rec.name }}.{{ rec.zone }}"
  register: absent_get_ns_results
  ignore_errors: true

- name: Debug absent_get_ns_results
  ansible.builtin.debug:
    var: absent_get_ns_results
  when: debug | default(false)

- name: "Assert no records were found"
  ansible.builtin.assert:
    that:
      - (absent_get_ns_results.results | map(attribute='failed') | list | unique) == [ true ]

# Phase 3: real creation
- name: "Create NS records"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: NS
    nameServer: "{{ rec.nameServer }}"
    glue: "{{ rec.glue | default(omit) }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
    expiryTtl: "{{ rec.expiryTtl | default(omit) }}"
  loop: "{{ add_ns_test_records }}"
  loop_control:
    loop_var: rec
    label: "Create: {{ rec.idx }}-{{ rec.name }}.{{ rec.zone }}"
  register: create_ns_results

- name: "Assert creations changed"
  ansible.builtin.assert:
    that:
      - (create_ns_results.results | map(attribute='changed') | list | unique) == [ true ]

# Phase 4: verify presence via get_records
- name: "Get NS records"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
  loop: "{{ add_ns_test_records }}"
  loop_control:
    loop_var: rec
    label: "Get: {{ rec.name }}.{{ rec.zone }}"
  register: present_get_ns_results

- name: Debug present_get_ns_results
  ansible.builtin.debug:
    var: present_get_ns_results
  when: debug | default(false)

- name: "Assert records exist"
  ansible.builtin.assert:
    that: (present_get_ns_results.results | map(attribute='api_response.status') | list | unique) == ['ok']
    quiet: true

- name: "Assert NS record parameters match request"
  ansible.builtin.assert:
    that:
      - >-
        ((item.records | default([])
           | selectattr('type','equalto','NS')
           | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
           | list | first).rData.nameServer) == item.rec.nameServer
      - >-
        ('glue' not in item.rec) or (
          (item.rec.glue in (
            (item.records | default([])
             | selectattr('type','equalto','NS')
             | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
             | list | first).glueRecords | default([])
          ))
        )
      - >-
        ('ttl' not in item.rec) or (
          ((item.records | default([])
             | selectattr('type','equalto','NS')
             | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
             | list | first).ttl | int) == (item.rec.ttl | int)
        )
      - >-
        ('comments' not in item.rec) or (
          ((item.records | default([])
             | selectattr('type','equalto','NS')
             | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
             | list | first).comments | default(item.rec.comments)) == item.rec.comments
        )
      - >-
        ('expiryTtl' not in item.rec) or (
          ((item.records | default([])
             | selectattr('type','equalto','NS')
             | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
             | list | first).expiryTtl | int) == (item.rec.expiryTtl | int)
        )
    quiet: true
  loop: "{{ present_get_ns_results.results }}"
  loop_control:
    label: "Params: {{ item.rec.name }}.{{ item.rec.zone }}"

# Phase 5: re-plan (no change)
- name: "Check mode: Re-add NS records"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: NS
    nameServer: "{{ rec.nameServer }}"
    glue: "{{ rec.glue | default(omit) }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
    expiryTtl: "{{ rec.expiryTtl | default(omit) }}"
  check_mode: true
  loop: "{{ add_ns_test_records }}"
  loop_control:
    loop_var: rec
    label: "check_mode: {{ rec.name }}.{{ rec.zone }}"
  register: replan_ns_results

- name: "Assert re-add had no changes"
  ansible.builtin.assert:
    that:
      - (replan_ns_results.results | map(attribute='changed') | list | unique) == [ false ]

# Phase 6: re-run real (no change)
- name: "Idempotency: Re-run add NS records"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: NS
    nameServer: "{{ rec.nameServer }}"
    glue: "{{ rec.glue | default(omit) }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
    expiryTtl: "{{ rec.expiryTtl | default(omit) }}"
  loop: "{{ add_ns_test_records }}"
  loop_control:
    loop_var: rec
    label: "Recreate: {{ rec.name }}.{{ rec.zone }}"
  register: rerun_ns_results

- name: "Assert re-run no changes"
  ansible.builtin.assert:
    that:
      - (rerun_ns_results.results | map(attribute='changed') | list | unique) == [ false ]

# Phase 7: overwrite tests
- name: "Overwrite NS record (ns-basic) with new values"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ overwrite_ns_record.name }}.{{ overwrite_ns_record.zone }}"
    zone: "{{ overwrite_ns_record.zone }}"
    type: NS
    nameServer: "{{ overwrite_ns_record.nameServer }}"
    comments: "{{ overwrite_ns_record.comments }}"
    overwrite: true
  register: overwrite_ns_result

- name: "Assert overwrite operation reports changed"
  ansible.builtin.assert:
    that:
      - overwrite_ns_result.changed

- name: "Fetch overwritten NS record for presence (get_records)"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ overwrite_ns_record.name }}.{{ overwrite_ns_record.zone }}"
    zone: "{{ overwrite_ns_record.zone }}"
  register: overwritten_ns_get_result

- name: Debug overwritten_ns_get_result
  ansible.builtin.debug:
    var: overwritten_ns_get_result
  when: debug | default(false)

- name: "Assert overwritten NS record has new values"
  ansible.builtin.assert:
    that:
      - >-
        (overwritten_ns_get_result.records | default([])
         | selectattr('type','equalto','NS')
         | selectattr('name','equalto', (overwrite_ns_record.name ~ '.' ~ overwrite_ns_record.zone))
         | list | first).rData.nameServer == overwrite_ns_record.nameServer
      - >-
        (overwritten_ns_get_result.records | default([])
         | selectattr('type','equalto','NS')
         | selectattr('name','equalto', (overwrite_ns_record.name ~ '.' ~ overwrite_ns_record.zone))
         | list | first).comments == overwrite_ns_record.comments

# Phase 8: negative tests
- name: "Negative: missing required nameServer"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "neg-missing-ns.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: NS
  register: neg_ns_missing_nameServer
  ignore_errors: true

- name: Debug neg_ns_missing_nameServer
  ansible.builtin.debug:
    var: neg_ns_missing_nameServer
  when: debug | default(false)

- name: Assert failure of missing nameServer
  ansible.builtin.assert:
    that:
      - neg_ns_missing_nameServer.failed
      - "'nameServer' in (neg_ns_missing_nameServer.msg | default(''))"

- name: "Negative: unsupported param for NS (ipAddress)"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "neg-badparam-ns.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: NS
    nameServer: badparam.example.net.
    ipAddress: 192.0.2.55
  register: neg_ns_bad_param
  ignore_errors: true
  
- name: Assert failure of unsupported param
  ansible.builtin.assert:
    that:
      - neg_ns_bad_param.failed
      - "'ipAddress' in (neg_ns_bad_param.msg | default(''))"

- name: "Negative: invalid API token"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: BADTOKEN
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "neg-badtoken-ns.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: NS
    nameServer: badtoken.example.net.
  register: neg_ns_bad_token
  ignore_errors: true

- name: Assert failure of invalid API token
  ansible.builtin.assert:
    that:
      - neg_ns_bad_token.failed
      - "'Invalid token' in (neg_ns_bad_token.msg)"
