---
# Integration test suite for technitium_dns_list_apps
# This test validates listing all installed DNS apps by:
# 1. Listing installed apps
# 2. Verifying the response structure
# 3. Testing with invalid credentials
# 4. Checking for expected app properties

# Phase 1: Setup - Load configuration
- name: "Load test configuration"
  include_vars: ../../integration_config.yml

# Phase 2: List all installed apps
- name: "List all installed apps"
  technitium_dns_list_apps:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
  register: list_apps_result

- name: "Debug list apps result"
  debug:
    var: list_apps_result
  when: debug | default(false)

- name: "Assert list apps succeeded"
  assert:
    that:
      - not list_apps_result.failed
      - not list_apps_result.changed
      - list_apps_result.apps is defined
      - list_apps_result.apps is iterable
    fail_msg: "List apps should have succeeded and returned a list"

# Phase 3: Verify app structure (if any apps are installed)
- name: "Verify app structure"
  assert:
    that:
      - item.name is defined
      - item.version is defined
      - item.dnsApps is defined
    fail_msg: "Each app should have name, version, and dnsApps properties"
  loop: "{{ list_apps_result.apps }}"
  when: list_apps_result.apps | length > 0

# Phase 4: Verify dnsApps structure
- name: "Verify dnsApps structure"
  assert:
    that:
      - dns_app.classPath is defined
      - dns_app.description is defined
      - dns_app.isAppRecordRequestHandler is defined
      - dns_app.isRequestController is defined
      - dns_app.isAuthoritativeRequestHandler is defined
      - dns_app.isRequestBlockingHandler is defined
      - dns_app.isQueryLogger is defined
      - dns_app.isPostProcessor is defined
    fail_msg: "Each dnsApp should have all required properties"
  loop: "{{ list_apps_result.apps | map(attribute='dnsApps') | flatten }}"
  loop_control:
    loop_var: dns_app
  when: list_apps_result.apps | length > 0

# Phase 5: Test idempotency - listing again should return same results
- name: "List apps again for idempotency check"
  technitium_dns_list_apps:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
  register: list_apps_again

- name: "Assert results are consistent"
  assert:
    that:
      - not list_apps_again.failed
      - not list_apps_again.changed
      - list_apps_again.apps | length == list_apps_result.apps | length
    fail_msg: "List apps should return consistent results"

# Phase 6: Test failure cases
- name: "Test list apps with invalid API token"
  technitium_dns_list_apps:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "invalid_token_12345"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
  register: invalid_token_result
  ignore_errors: true

- name: "Assert failure with invalid API token"
  assert:
    that:
      - invalid_token_result.failed
      - "'Invalid token' in (invalid_token_result.msg) or 'Technitium API error' in (invalid_token_result.msg)"
    fail_msg: "Invalid token should cause failure"

# Phase 7: Test with different API ports
- name: "Test list apps with custom API port"
  technitium_dns_list_apps:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
  register: custom_port_result

- name: "Assert custom port works"
  assert:
    that:
      - not custom_port_result.failed
      - custom_port_result.apps is defined
    fail_msg: "List apps should work with custom API port"
