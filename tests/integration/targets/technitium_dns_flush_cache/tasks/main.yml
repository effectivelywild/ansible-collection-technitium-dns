---
# Integration test suite for technitium_dns_flush_cache
# This test validates DNS cache flushing functionality by verifying
# that cached entries exist, flushing the cache, and verifying it's empty

# Phase 1: Setup - Load configuration
- name: "Load test configuration"
  include_vars: ../../integration_config.yml

# Phase 2: Populate cache with DNS queries
- name: "Perform DNS queries to populate cache"
  command: docker exec technitium02.{{ container_suffix }} dig @localhost {{ item }} +short
  delegate_to: localhost
  loop:
    - "google.com"
    - "example.com"
    - "example.org"
  ignore_errors: true

- name: "Pause 5 seconds to ensure cache is populated"
  pause:
    seconds: 5

# Phase 3: Verify cache has entries
- name: "List cache for google.com to verify it exists"
  technitium_dns_list_cache:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    domain: "google.com"
  register: cache_before_google

- name: "List cache for example.com to verify it exists"
  technitium_dns_list_cache:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    domain: "example.com"
  register: cache_before_example

- name: "Debug cache before flush"
  debug:
    msg:
      - "google.com cache: {{ cache_before_google.records | length }} records"
      - "example.com cache: {{ cache_before_example.records | length }} records"
  when: debug | default(false)

# Phase 4: Flush entire DNS cache
- name: "Flush entire DNS cache"
  technitium_dns_flush_cache:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
  register: flush_result

- name: "Debug flush result"
  debug:
    var: flush_result
  when: debug | default(false)

- name: "Assert flush succeeded"
  assert:
    that:
      - not flush_result.failed
      - flush_result.changed
      - flush_result.msg is defined
      - "'successfully' in flush_result.msg.lower() or 'flushed' in flush_result.msg.lower()"
    fail_msg: "Cache flush should have succeeded"

- name: "Pause 2 seconds to ensure cache is flushed"
  pause:
    seconds: 2

# Phase 5: Verify cache is empty
- name: "List cache for google.com after flush"
  technitium_dns_list_cache:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    domain: "google.com"
  register: cache_after_google

- name: "List cache for example.com after flush"
  technitium_dns_list_cache:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    domain: "example.com"
  register: cache_after_example

- name: "Debug cache after flush"
  debug:
    msg:
      - "google.com cache after flush: {{ cache_after_google.records | length }} records"
      - "example.com cache after flush: {{ cache_after_example.records | length }} records"
  when: debug | default(false)

- name: "Assert all caches are empty"
  assert:
    that:
      - cache_after_google.records | length == 0
      - cache_after_example.records | length == 0
    fail_msg: "All caches should be empty after flush"

# Phase 6: Test idempotency - flushing again should succeed
- name: "Flush cache again (should succeed even if empty)"
  technitium_dns_flush_cache:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
  register: flush_again_result

- name: "Assert second flush succeeded"
  assert:
    that:
      - not flush_again_result.failed
      - flush_again_result.changed
    fail_msg: "Second flush should have succeeded"

# Phase 7: Verify cache can be repopulated after flush
- name: "Perform DNS query after flush to repopulate cache"
  command: docker exec technitium02.{{ container_suffix }} dig @localhost wikipedia.org +short
  delegate_to: localhost
  ignore_errors: true

- name: "Pause to ensure cache is repopulated"
  pause:
    seconds: 5

- name: "List cache for wikipedia.org"
  technitium_dns_list_cache:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    domain: "wikipedia.org"
  register: cache_repopulated

- name: "Assert cache can be repopulated"
  assert:
    that:
      - cache_repopulated.domain == "wikipedia.org"
      - cache_repopulated.records is defined
    fail_msg: "Cache should be repopulated after flush"

# Phase 8: Test failure cases
- name: "Test flush with invalid API token"
  technitium_dns_flush_cache:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "invalid_token_12345"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
  register: invalid_token_result
  ignore_errors: true

- name: "Assert failure with invalid API token"
  assert:
    that:
      - invalid_token_result.failed
      - "'Invalid token' in (invalid_token_result.msg) or 'Technitium API error' in (invalid_token_result.msg)"
    fail_msg: "Invalid token should cause failure"

- name: "Test deletion with invalid domain characters (spaces)"
  technitium_dns_delete_cache:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    domain: "invalid domain.com"
  register: invalid_domain_spaces_result
  ignore_errors: true

- name: "Assert failure with invalid domain (spaces)"
  assert:
    that:
      - invalid_domain_spaces_result.failed
    fail_msg: "Domain with spaces should cause failure"

- name: "Test deletion with invalid domain characters (special chars)"
  technitium_dns_delete_cache:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    domain: "invalid@domain!.com"
  register: invalid_domain_special_result
  ignore_errors: true

- name: "Assert failure with invalid domain (special chars)"
  assert:
    that:
      - invalid_domain_special_result.failed
    fail_msg: "Domain with special characters should cause failure"
