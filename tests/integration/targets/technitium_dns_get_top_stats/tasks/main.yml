---
# Integration test suite for technitium_dns_get_top_stats
# This test validates top statistics retrieval functionality

# Phase 1: Setup - Load configuration
- name: "Load test configuration"
  include_vars: ../../integration_config.yml

# Phase 2: Test TopClients stats
- name: "Get top clients stats"
  technitium_dns_get_top_stats:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    stats_type: "TopClients"
    limit: 10
  register: top_clients_result

- name: "Debug top clients result"
  debug:
    var: top_clients_result
  when: debug | default(false)

- name: "Assert top clients retrieval succeeded"
  assert:
    that:
      - not top_clients_result.failed
      - not top_clients_result.changed
      - top_clients_result.data is defined
      - top_clients_result.data is sequence
      - top_clients_result.topClients is defined
      - top_clients_result.topClients == top_clients_result.data
    fail_msg: "Top clients retrieval should have succeeded"

- name: "Verify top clients structure if any exist"
  assert:
    that:
      - client.name is defined
      - client.hits is defined
      - client.hits is number
      - client.rateLimited is defined
      - client.rateLimited is boolean
    fail_msg: "Each client should have expected properties"
  loop: "{{ top_clients_result.topClients }}"
  loop_control:
    loop_var: client
  when: top_clients_result.topClients | length > 0

# Phase 3: Test TopDomains stats
- name: "Get top domains stats"
  technitium_dns_get_top_stats:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    stats_type: "TopDomains"
    limit: 20
  register: top_domains_result

- name: "Assert top domains retrieval succeeded"
  assert:
    that:
      - not top_domains_result.failed
      - not top_domains_result.changed
      - top_domains_result.data is defined
      - top_domains_result.data is sequence
      - top_domains_result.topDomains is defined
    fail_msg: "Top domains retrieval should have succeeded"

- name: "Verify top domains structure if any exist"
  assert:
    that:
      - domain.name is defined
      - domain.hits is defined
      - domain.hits is number
    fail_msg: "Each domain should have expected properties"
  loop: "{{ top_domains_result.topDomains }}"
  loop_control:
    loop_var: domain
  when: top_domains_result.topDomains | length > 0

# Phase 4: Test TopBlockedDomains stats
- name: "Get top blocked domains stats"
  technitium_dns_get_top_stats:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    stats_type: "TopBlockedDomains"
    limit: 15
  register: top_blocked_result

- name: "Assert top blocked domains retrieval succeeded"
  assert:
    that:
      - not top_blocked_result.failed
      - not top_blocked_result.changed
      - top_blocked_result.data is defined
      - top_blocked_result.data is sequence
      - top_blocked_result.topBlockedDomains is defined
    fail_msg: "Top blocked domains retrieval should have succeeded"

- name: "Verify top blocked domains structure if any exist"
  assert:
    that:
      - domain.name is defined
      - domain.hits is defined
      - domain.hits is number
    fail_msg: "Each blocked domain should have expected properties"
  loop: "{{ top_blocked_result.topBlockedDomains }}"
  loop_control:
    loop_var: domain
  when: top_blocked_result.topBlockedDomains | length > 0

# Phase 5: Test with different time ranges
- name: "Get top clients for last day"
  technitium_dns_get_top_stats:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    stats_type: "TopClients"
    type: "LastDay"
    limit: 5
  register: last_day_result

- name: "Assert last day top clients retrieval succeeded"
  assert:
    that:
      - not last_day_result.failed
      - last_day_result.data is defined
    fail_msg: "Last day top clients retrieval should have succeeded"

# Phase 6: Test TopClients-specific options
- name: "Get top clients without reverse lookup"
  technitium_dns_get_top_stats:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    stats_type: "TopClients"
    no_reverse_lookup: true
    limit: 10
  register: no_lookup_result

- name: "Assert no reverse lookup retrieval succeeded"
  assert:
    that:
      - not no_lookup_result.failed
      - no_lookup_result.data is defined
    fail_msg: "Top clients with no reverse lookup should have succeeded"

# Phase 7: Test failure cases
- name: "Test invalid API token"
  technitium_dns_get_top_stats:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "invalid_token_12345"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    stats_type: "TopClients"
  register: invalid_token_result
  ignore_errors: true

- name: "Assert failure with invalid API token"
  assert:
    that:
      - invalid_token_result.failed
      - "'Invalid token' in (invalid_token_result.msg) or 'Technitium API error' in (invalid_token_result.msg)"
    fail_msg: "Invalid token should cause failure"

- name: "Test invalid stats_type parameter"
  technitium_dns_get_top_stats:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    stats_type: "InvalidType"
  register: invalid_type_result
  ignore_errors: true

- name: "Assert failure with invalid stats_type"
  assert:
    that:
      - invalid_type_result.failed
    fail_msg: "Invalid stats_type should cause failure"
