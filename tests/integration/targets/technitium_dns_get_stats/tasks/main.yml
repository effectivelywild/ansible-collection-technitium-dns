---
# Integration test suite for technitium_dns_get_stats
# This test validates dashboard statistics retrieval functionality

# Phase 1: Setup - Load configuration
- name: "Load test configuration"
  include_vars: ../../integration_config.yml

# Phase 2: Test successful stats retrieval with default parameters (LastHour)
- name: "Get dashboard stats for last hour"
  technitium_dns_get_stats:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
  register: stats_result

- name: "Debug stats result"
  debug:
    var: stats_result
  when: debug | default(false)

- name: "Assert stats retrieval succeeded"
  assert:
    that:
      - not stats_result.failed
      - not stats_result.changed
      - stats_result.stats is defined
      - stats_result.mainChartData is defined
      - stats_result.queryResponseChartData is defined
      - stats_result.queryTypeChartData is defined
      - stats_result.protocolTypeChartData is defined
      - stats_result.topClients is defined
      - stats_result.topDomains is defined
      - stats_result.topBlockedDomains is defined
    fail_msg: "Stats retrieval should have succeeded with all expected data"

# Phase 3: Verify stats structure
- name: "Verify aggregate stats structure"
  assert:
    that:
      - stats_result.stats.totalQueries is defined
      - stats_result.stats.totalQueries is number
      - stats_result.stats.totalNoError is defined
      - stats_result.stats.totalServerFailure is defined
      - stats_result.stats.totalNxDomain is defined
      - stats_result.stats.totalRefused is defined
      - stats_result.stats.totalAuthoritative is defined
      - stats_result.stats.totalRecursive is defined
      - stats_result.stats.totalCached is defined
      - stats_result.stats.totalBlocked is defined
      - stats_result.stats.totalDropped is defined
      - stats_result.stats.totalClients is defined
      - stats_result.stats.zones is defined
      - stats_result.stats.cachedEntries is defined
    fail_msg: "Stats should contain all expected aggregate fields"

- name: "Verify main chart data structure"
  assert:
    that:
      - stats_result.mainChartData.labelFormat is defined
      - stats_result.mainChartData.labels is defined
      - stats_result.mainChartData.labels is sequence
      - stats_result.mainChartData.datasets is defined
      - stats_result.mainChartData.datasets is sequence
    fail_msg: "Main chart data should have expected structure"

- name: "Verify top clients structure"
  assert:
    that:
      - stats_result.topClients is sequence
    fail_msg: "Top clients should be a list"

# Phase 4: Test with different time ranges
- name: "Get stats for last day"
  technitium_dns_get_stats:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    type: "LastDay"
  register: last_day_result

- name: "Assert last day stats retrieval succeeded"
  assert:
    that:
      - not last_day_result.failed
      - last_day_result.stats is defined
    fail_msg: "Last day stats retrieval should have succeeded"

- name: "Get stats with UTC format"
  technitium_dns_get_stats:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    utc: true
  register: utc_result

- name: "Assert UTC stats retrieval succeeded"
  assert:
    that:
      - not utc_result.failed
      - utc_result.stats is defined
    fail_msg: "UTC stats retrieval should have succeeded"

# Phase 5: Test failure cases
- name: "Test invalid API token"
  technitium_dns_get_stats:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "invalid_token_12345"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
  register: invalid_token_result
  ignore_errors: true

- name: "Assert failure with invalid API token"
  assert:
    that:
      - invalid_token_result.failed
      - "'Invalid token' in (invalid_token_result.msg) or 'Technitium API error' in (invalid_token_result.msg)"
    fail_msg: "Invalid token should cause failure"

- name: "Test invalid type parameter"
  technitium_dns_get_stats:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    type: "InvalidType"
  register: invalid_type_result
  ignore_errors: true

- name: "Assert failure with invalid type"
  assert:
    that:
      - invalid_type_result.failed
    fail_msg: "Invalid type should cause failure"
