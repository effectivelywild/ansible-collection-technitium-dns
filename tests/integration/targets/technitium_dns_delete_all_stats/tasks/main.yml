---
# Integration test suite for technitium_dns_delete_all_stats
# This test validates statistics deletion functionality by:
# 1. Adding a blocked domain
# 2. Deleting all stats
# 3. Performing DNS queries to generate new stats
# 4. Verifying stats are tracked correctly
# 5. Deleting all stats again and verifying they are cleared

# Phase 1: Setup - Load configuration
- name: "Load test configuration"
  include_vars: ../../integration_config.yml

# Phase 2: Setup - Add blocked domain and clear stats
- name: "Add blocked domain for google.com"
  technitium_dns_add_blocked_zone:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    domain: "google.com"
  register: add_blocked_result

- name: "Delete all statistics to start fresh"
  technitium_dns_delete_all_stats:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
  register: initial_delete_result

- name: "Assert initial deletion succeeded"
  assert:
    that:
      - not initial_delete_result.failed
      - initial_delete_result.changed
      - initial_delete_result.msg is defined
      - "'successfully' in initial_delete_result.msg.lower() or 'deleted' in initial_delete_result.msg.lower()"
    fail_msg: "Initial stats deletion should have succeeded"

- name: "Pause 30 seconds to ensure delete updates stats"
  pause:
    seconds: 30

# Phase 3: Perform DNS queries to generate stats
- name: "Perform DNS query 1 to google.com (should be blocked)"
  command: docker exec technitium02.{{ container_suffix }} dig @localhost google.com +short
  delegate_to: localhost
  register: query1_result
  ignore_errors: true

- name: "Perform DNS query 2 to google.com (should be blocked)"
  command: docker exec technitium02.{{ container_suffix }} dig @localhost google.com +short
  delegate_to: localhost
  register: query2_result
  ignore_errors: true

- name: "Perform DNS query 3 to google.com (should be blocked)"
  command: docker exec technitium02.{{ container_suffix }} dig @localhost google.com +short
  delegate_to: localhost
  register: query3_result
  ignore_errors: true

- name: "Pause 30 seconds to ensure stats are updated"
  pause:
    seconds: 30

# Phase 4: Verify stats show the queries
- name: "Get stats after queries"
  technitium_dns_get_stats:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
  register: stats_after_queries

- name: "Debug stats after queries"
  debug:
    var: stats_after_queries
  when: debug | default(false)

- name: "Assert stats show 3 Blocked responses (blocked queries)"
  assert:
    that:
      - stats_after_queries.stats is defined
      - stats_after_queries.stats.totalBlocked is defined
      - stats_after_queries.stats.totalBlocked == 3
    fail_msg: "Stats should show 3 blocked responses for blocked google.com queries"

# Phase 5: Clear all stats
- name: "Delete all statistics"
  technitium_dns_delete_all_stats:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
  register: delete_result

- name: "Debug delete result"
  debug:
    var: delete_result
  when: debug | default(false)

- name: "Assert deletion succeeded"
  assert:
    that:
      - not delete_result.failed
      - delete_result.changed
      - delete_result.msg is defined
      - "'successfully' in delete_result.msg.lower() or 'deleted' in delete_result.msg.lower()"
    fail_msg: "Stats deletion should have succeeded"

- name: "Pause 30 seconds to ensure stats are updated after deletion"
  pause:
    seconds: 30

# Phase 6: Verify stats are cleared
- name: "Get stats after deletion"
  technitium_dns_get_stats:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
  register: stats_after_deletion

- name: "Debug stats after deletion"
  debug:
    var: stats_after_deletion
  when: debug | default(false)

- name: "Assert stats are cleared (totalBlocked should be 0)"
  assert:
    that:
      - stats_after_deletion.stats is defined
      - stats_after_deletion.stats.totalBlocked is defined
      - stats_after_deletion.stats.totalBlocked == 0
      - stats_after_deletion.stats.totalQueries == 0
    fail_msg: "Stats should be completely cleared after deletion"

# Phase 7: Test idempotency - deleting again should succeed
- name: "Delete all statistics again (idempotency check)"
  technitium_dns_delete_all_stats:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
  register: delete_again_result

- name: "Assert second deletion succeeded"
  assert:
    that:
      - not delete_again_result.failed
      - delete_again_result.changed
    fail_msg: "Second deletion should have succeeded"

# Phase 8: Test failure cases
- name: "Test deletion with invalid API token"
  technitium_dns_delete_all_stats:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "invalid_token_12345"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
  register: invalid_token_result
  ignore_errors: true

- name: "Assert failure with invalid API token"
  assert:
    that:
      - invalid_token_result.failed
      - "'Invalid token' in (invalid_token_result.msg) or 'Technitium API error' in (invalid_token_result.msg)"
    fail_msg: "Invalid token should cause failure"

# Phase 9: Cleanup - Remove blocked domain
- name: "Remove blocked domain for google.com"
  technitium_dns_delete_blocked_zone:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    domain: "google.com"
  register: delete_blocked_result
  ignore_errors: true
