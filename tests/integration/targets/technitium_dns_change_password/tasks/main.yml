---
# Integration test suite for technitium_dns_change_password
# This test validates password change functionality

# Phase 1: Setup - Load configuration
- name: "Load test configuration"
  include_vars: ../../integration_config.yml

# Phase 2: Cleanup - Delete test user if it exists
- name: "Cleanup - Delete test user if it exists"
  technitium_dns_delete_user:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    username: "testuser"
  ignore_errors: true

# Phase 3: Create test user
- name: "Create test user"
  technitium_dns_create_user:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    username: "testuser"
    password: "testpassword123"
    displayName: "Test User"
  register: create_user_result

- name: "Assert test user creation succeeded"
  assert:
    that:
      - not create_user_result.failed
      - create_user_result.changed
    fail_msg: "Test user creation should have succeeded"

# Phase 4: Add user to Administrators group
- name: "Add test user to Administrators group"
  technitium_dns_set_user_details:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    username: "testuser"
    memberOfGroups:
      - "Administrators"
  register: add_user_to_group_result

- name: "Assert user was added to Administrators group"
  assert:
    that:
      - not add_user_to_group_result.failed
      - add_user_to_group_result.changed
    fail_msg: "Adding user to Administrators group should have succeeded"

# Phase 5: Login as test user to get a token
- name: "Login as test user to get token"
  uri:
    url: "{{ technitium_api_url_2 }}:{{ technitium_api_port_2 }}/api/user/login?user=testuser&pass=testpassword123&includeInfo=true"
    method: GET
    validate_certs: "{{ validate_certs }}"
    return_content: yes
  register: login_result

- name: "Assert login succeeded and token was received"
  assert:
    that:
      - login_result.status == 200
      - login_result.json.status == "ok"
      - login_result.json.token is defined
      - login_result.json.username == "testuser"
    fail_msg: "Login should have succeeded and returned a token"

# Phase 6: Use the module to change the password
- name: "Change password using the module"
  technitium_dns_change_password:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ login_result.json.token }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    pass: "newtestpassword456"
  register: change_password_result

- name: "Debug change password result"
  debug:
    var: change_password_result
  when: debug | default(false)

- name: "Assert password change succeeded"
  assert:
    that:
      - not change_password_result.failed
      - change_password_result.changed
      - change_password_result.api_response is defined
      - change_password_result.api_response.status == "ok"
      - "'Password changed successfully' in change_password_result.msg"
    fail_msg: "Password change should have succeeded"

# Phase 7: Verify old password no longer works
- name: "Try to login with old password (should fail)"
  uri:
    url: "{{ technitium_api_url_2 }}:{{ technitium_api_port_2 }}/api/user/login?user=testuser&pass=testpassword123&includeInfo=true"
    method: GET
    validate_certs: "{{ validate_certs }}"
    return_content: yes
  register: old_password_login_result
  ignore_errors: true

- name: debug old password login result
  debug:
    var: old_password_login_result
  when: debug | default(false)

- name: "Assert old password no longer works"
  assert:
    that:
      - old_password_login_result.status == 200
      - old_password_login_result.json.status != "ok"
      - old_password_login_result.json.errorMessage is defined
      - "'Invalid username or password' in old_password_login_result.json.errorMessage"
    fail_msg: "Old password should not work after password change"

# Phase 8: Verify new password works
- name: "Login with new password to verify it works"
  uri:
    url: "{{ technitium_api_url_2 }}:{{ technitium_api_port_2 }}/api/user/login?user=testuser&pass=newtestpassword456&includeInfo=true"
    method: GET
    validate_certs: "{{ validate_certs }}"
    return_content: yes
  register: new_password_login_result

- name: "Assert new password works"
  assert:
    that:
      - new_password_login_result.status == 200
      - new_password_login_result.json.status == "ok"
      - new_password_login_result.json.token is defined
      - new_password_login_result.json.username == "testuser"
    fail_msg: "New password should work after password change"

# Phase 9: Test check mode
- name: "Test check mode for password change"
  technitium_dns_change_password:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ new_password_login_result.json.token }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    pass: "checkmodetestpassword789"
  check_mode: true
  register: check_mode_result

- name: "Assert check mode works correctly"
  assert:
    that:
      - not check_mode_result.failed
      - check_mode_result.changed
      - "'would be changed' in check_mode_result.msg"
      - check_mode_result.api_response.check_mode is defined
      - check_mode_result.api_response.check_mode
    fail_msg: "Check mode should work correctly"

# Phase 10: Verify check mode didn't actually change password
- name: "Verify check mode didn't change password (login with current password)"
  uri:
    url: "{{ technitium_api_url_2 }}:{{ technitium_api_port_2 }}/api/user/login?user=testuser&pass=newtestpassword456&includeInfo=true"
    method: GET
    validate_certs: "{{ validate_certs }}"
    return_content: yes
  register: after_check_mode_login_result

- name: "Assert password unchanged after check mode"
  assert:
    that:
      - after_check_mode_login_result.status == 200
      - after_check_mode_login_result.json.status == "ok"
      - after_check_mode_login_result.json.token is defined
    fail_msg: "Check mode should not have changed actual password"

# Phase 11: Test non-idempotency (module should always report changed)
- name: "Change password to the same value (should still report changed)"
  technitium_dns_change_password:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ after_check_mode_login_result.json.token }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    pass: "newtestpassword456"
  register: same_password_result

- name: "Assert module is not idempotent (always reports changed)"
  assert:
    that:
      - not same_password_result.failed
      - same_password_result.changed
    fail_msg: "Module should always report changed (not idempotent)"

# Phase 12: Verify password still works after "same password" change
- name: "Login after changing to same password"
  uri:
    url: "{{ technitium_api_url_2 }}:{{ technitium_api_port_2 }}/api/user/login?user=testuser&pass=newtestpassword456&includeInfo=true"
    method: GET
    validate_certs: "{{ validate_certs }}"
    return_content: yes
  register: after_same_password_login_result

- name: "Assert password still works"
  assert:
    that:
      - after_same_password_login_result.status == 200
      - after_same_password_login_result.json.status == "ok"
    fail_msg: "Password should still work after setting to same value"

# Phase 13: Test failure cases
- name: "Test invalid API token"
  technitium_dns_change_password:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "invalid_token_12345"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    pass: "newpassword789"
  register: invalid_token_result
  ignore_errors: true

- name: "Assert failure with invalid API token"
  assert:
    that:
      - invalid_token_result.failed
      - "'Invalid token' in (invalid_token_result.msg) or 'Technitium API error' in (invalid_token_result.msg)"
    fail_msg: "Invalid token should cause failure"

# Phase 14: Cleanup - Delete test user
- name: "Cleanup - Delete test user"
  technitium_dns_delete_user:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
    username: "testuser"
  register: cleanup_user_result

- name: "Assert cleanup succeeded"
  assert:
    that:
      - not cleanup_user_result.failed
    fail_msg: "Cleanup should have succeeded"
