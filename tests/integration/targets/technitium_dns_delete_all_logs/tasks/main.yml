---
# Integration test suite for technitium_dns_delete_all_logs
# This test validates deleting all log files by:
# 1. Getting initial log file size
# 2. Deleting all logs
# 3. Generating new activity to create logs
# 4. Verifying new logs are smaller than initial size (old logs were deleted)
# 5. Testing idempotency
# 6. Testing error cases

# Phase 1: Setup - Load configuration
- name: "Load test configuration"
  include_vars: ../../integration_config.yml

# Phase 2: Get initial log file size before deletion
- name: "List log files to get initial size"
  technitium_dns_list_logs:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
  register: initial_logs_list

- name: "Store initial log file size (if logs exist)"
  set_fact:
    initial_log_size: "{{ initial_logs_list.log_files[0].size if initial_logs_list.log_files | length > 0 else '0 B' }}"
    initial_log_count: "{{ initial_logs_list.log_files | length }}"

- name: "Debug initial log state"
  debug:
    msg: "Initial log count: {{ initial_log_count }}, first log size: {{ initial_log_size }}"
  when: debug | default(false)

# Phase 3: Delete all log files
- name: "Delete all log files"
  technitium_dns_delete_all_logs:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
  register: delete_all_logs_result

- name: "Debug delete all logs result"
  debug:
    var: delete_all_logs_result
  when: debug | default(false)

- name: "Assert delete all logs succeeded"
  assert:
    that:
      - not delete_all_logs_result.failed
      - delete_all_logs_result.changed
      - delete_all_logs_result.msg is defined
      - "'deleted' in (delete_all_logs_result.msg | lower) or 'success' in (delete_all_logs_result.msg | lower)"
    fail_msg: "Delete all logs should have succeeded"

- name: "Pause after deletion to ensure deletion completes"
  pause:
    seconds: 5

# Phase 4: Generate new activity to create new logs
- name: "Perform DNS queries to generate new logs"
  command: docker exec technitium02{{ container_suffix }} dig @localhost test{{ item }}.example.com +short
  delegate_to: localhost
  register: query_result
  ignore_errors: true
  loop: "{{ range(1, 4) | list }}"

- name: "Pause to ensure new logs are written"
  pause:
    seconds: 5

# Phase 5: Verify logs were reset (new logs should be smaller than initial)
- name: "List log files after deletion and new activity"
  technitium_dns_list_logs:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
  register: list_logs_after_delete

- name: "Debug logs after deletion"
  debug:
    var: list_logs_after_delete
  when: debug | default(false)

- name: "Store new log file size (if logs exist)"
  set_fact:
    new_log_size: "{{ list_logs_after_delete.log_files[0].size if list_logs_after_delete.log_files | length > 0 else '0 B' }}"

- name: "Assert logs were deleted and recreated (size must be different)"
  assert:
    that:
      - initial_log_count | int > 0
      - new_log_size != initial_log_size
    fail_msg: "Log size must change after delete all - original: {{ initial_log_size }}, after deletion: {{ new_log_size }}"
  when: initial_log_count | int > 0

# Phase 6: Test idempotency - deleting again should succeed
- name: "Delete all log files again (idempotency check)"
  technitium_dns_delete_all_logs:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
  register: delete_all_again_result

- name: "Assert second delete all succeeded"
  assert:
    that:
      - not delete_all_again_result.failed
      - delete_all_again_result.changed
    fail_msg: "Second delete all should have succeeded"

# Phase 7: Test failure cases
- name: "Test delete all logs with invalid API token"
  technitium_dns_delete_all_logs:
    api_url: "{{ technitium_api_url_2 }}"
    api_token: "invalid_token_12345"
    api_port: "{{ technitium_api_port_2 | int }}"
    validate_certs: "{{ validate_certs }}"
  register: invalid_token_result
  ignore_errors: true

- name: "Assert failure with invalid API token"
  assert:
    that:
      - invalid_token_result.failed
      - "'Invalid token' in (invalid_token_result.msg) or 'Technitium API error' in (invalid_token_result.msg)"
    fail_msg: "Invalid token should cause failure"
