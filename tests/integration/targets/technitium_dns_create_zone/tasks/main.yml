---
# Comprehensive 8-phase integration test suite for technitium_dns_create_zone
# This test suite validates zone creation functionality across all supported zone types

# Phase 1: Setup - Load configuration
- name: "Load test configuration"
  include_vars: ../vars/config.yml

- name: "Load zone test data"  
  include_vars: ../vars/zone_test_data.yml

- name: "Delete DNS zones (cleanup)"
  technitium_dns_delete_zone:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: "{{ zone_item.zone }}"
  register: zone_deletion_result
  loop: "{{ zones_to_create }}"
  loop_control:
    loop_var: zone_item
    label: "{{ zone_item.zone }}"

# Phase 2: Check mode - create DNS zones for testing
- name: "Check mode - Create DNS zones for testing"
  technitium_dns_create_zone:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: "{{ zone_item.zone }}"
    type: "{{ zone_item.type }}"
    # Optional parameters with defaults
    catalog: "{{ zone_item.catalog | default(omit) }}"
    useSoaSerialDateScheme: "{{ zone_item.useSoaSerialDateScheme | default(omit) }}"
    # Secondary/Stub zone parameters
    primaryNameServerAddresses: "{{ zone_item.primaryNameServerAddresses | default(omit) }}"
    zoneTransferProtocol: "{{ zone_item.zoneTransferProtocol | default(omit) }}"
    tsigKeyName: "{{ zone_item.tsigKeyName | default(omit) }}"
    validateZone: "{{ zone_item.validateZone | default(omit) }}"
    # Forwarder zone parameters
    initializeForwarder: "{{ zone_item.initializeForwarder | default(omit) }}"
    protocol: "{{ zone_item.protocol | default(omit) }}"
    forwarder: "{{ zone_item.forwarder | default(omit) }}"
    dnssecValidation: "{{ zone_item.dnssecValidation | default(omit) }}"
    # Proxy parameters
    proxyType: "{{ zone_item.proxyType | default(omit) }}"
    proxyAddress: "{{ zone_item.proxyAddress | default(omit) }}"
    proxyPort: "{{ zone_item.proxyPort | default(omit) }}"
    proxyUsername: "{{ zone_item.proxyUsername | default(omit) }}"
    proxyPassword: "{{ zone_item.proxyPassword | default(omit) }}"
  check_mode: true # Enable check mode
  register: zone_checkmode_creation_results
  loop: "{{ zones_to_create | default([]) }}"
  loop_control:
    loop_var: zone_item
    label: "{{ zone_item.zone }} ({{ zone_item.type }})"

- name: "Assert all zones would have been created"
  ansible.builtin.assert:
    that:
      - item.changed
      - not item.failed
    quiet: true
  loop: "{{ zone_checkmode_creation_results.results }}"
  loop_control:
    label: "{{ item.zone_item.zone }}"

# Phase 3 - Actually create DNS zones for testing
- name: "Create DNS zones for testing"
  technitium_dns_create_zone:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: "{{ zone_item.zone }}"
    type: "{{ zone_item.type }}"
    # Optional parameters with defaults
    catalog: "{{ zone_item.catalog | default(omit) }}"
    useSoaSerialDateScheme: "{{ zone_item.useSoaSerialDateScheme | default(omit) }}"
    # Secondary/Stub zone parameters
    primaryNameServerAddresses: "{{ zone_item.primaryNameServerAddresses | default(omit) }}"
    zoneTransferProtocol: "{{ zone_item.zoneTransferProtocol | default(omit) }}"
    tsigKeyName: "{{ zone_item.tsigKeyName | default(omit) }}"
    validateZone: "{{ zone_item.validateZone | default(omit) }}"
    # Forwarder zone parameters
    initializeForwarder: "{{ zone_item.initializeForwarder | default(omit) }}"
    protocol: "{{ zone_item.protocol | default(omit) }}"
    forwarder: "{{ zone_item.forwarder | default(omit) }}"
    dnssecValidation: "{{ zone_item.dnssecValidation | default(omit) }}"
    # Proxy parameters
    proxyType: "{{ zone_item.proxyType | default(omit) }}"
    proxyAddress: "{{ zone_item.proxyAddress | default(omit) }}"
    proxyPort: "{{ zone_item.proxyPort | default(omit) }}"
    proxyUsername: "{{ zone_item.proxyUsername | default(omit) }}"
    proxyPassword: "{{ zone_item.proxyPassword | default(omit) }}"
  register: zone_creation_results
  loop: "{{ zones_to_create | default([]) }}"
  loop_control:
    loop_var: zone_item
    label: "{{ zone_item.zone }} ({{ zone_item.type }})"

- name: Sign DNSSEC-enabled zones
  technitium_dns_sign_zone:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: "{{ zone_item.zone }}"
    algorithm: "{{ zone_item.dnssec_algorithm | default('RSA') }}"
    # RSA-specific parameters
    hashAlgorithm: "{{ zone_item.dnssec_hash_algorithm | default('SHA256') if (zone_item.dnssec_algorithm | default('RSA')) == 'RSA' else omit }}"
    kskKeySize: "{{ zone_item.ksk_key_size | default(2048) if (zone_item.dnssec_algorithm | default('RSA')) == 'RSA' else omit }}"
    zskKeySize: "{{ zone_item.zsk_key_size | default(1024) if (zone_item.dnssec_algorithm | default('RSA')) == 'RSA' else omit }}"
    # ECDSA/EDDSA-specific parameters
    curve: "{{ zone_item.dnssec_curve | default('P256') if (zone_item.dnssec_algorithm | default('RSA')) in ['ECDSA', 'EDDSA'] else omit }}"
    # Common optional parameters
    pemKskPrivateKey: "{{ zone_item.pem_ksk_private_key | default(omit) }}"
    pemZskPrivateKey: "{{ zone_item.pem_zsk_private_key | default(omit) }}"
    dnsKeyTtl: "{{ zone_item.dns_key_ttl | default(omit) }}"
    zskRolloverDays: "{{ zone_item.zsk_rollover_days | default(omit) }}"
    nxProof: "{{ zone_item.nx_proof | default('NSEC') }}"
    iterations: "{{ zone_item.nsec3_iterations | default(omit) }}"
    saltLength: "{{ zone_item.nsec3_salt_length | default(omit) }}"
  register: zone_signing_result
  loop: "{{ zones_to_create | default([]) }}"
  loop_control:
    loop_var: zone_item
    label: "{{ zone_item.zone }} (DNSSEC signing)"
  when:
    - zone_item.dnssec is defined

- name: "Assert all zones were created successfully"
  ansible.builtin.assert:
    that:
      - item.changed
      - not item.failed
    quiet: true
  loop: "{{ zone_creation_results.results }}"
  loop_control:
    label: "{{ item.zone_item.zone }}"

- name: "Debug zone creation results"
  debug:
    var: zone_creation_results
  when: debug | default(false)

# Phase 4 - Verify parameters match
# Parameters are spread across multiple tasks
- name: "Get zone information for created zones"
  technitium.dns.technitium_dns_get_zone_info:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: "{{ zone_item.zone }}"
  register: zone_info_results
  loop: "{{ zones_to_create }}"
  loop_control:
    loop_var: zone_item
    label: "{{ zone_item.zone }}"

- name: "Get zone options for created zones"
  technitium.dns.technitium_dns_get_zone_options:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: "{{ zone_item.zone }}"
  register: zone_info_options
  loop: "{{ zones_to_create }}"
  loop_control:
    loop_var: zone_item
    label: "{{ zone_item.zone }}"

- name: "Get FWD records to assert FWD options"
  technitium.dns.technitium_dns_get_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    name: "{{ zone_item.zone }}"
  register: fwd_record_info
  loop: "{{ zones_to_create }}"
  loop_control:
    loop_var: zone_item
    label: "{{ zone_item.zone }}"
  when: zone_item.type == 'Forwarder'

- name: "Debug zone info results"
  debug:
    var: zone_info_results
  when: debug | default(false)

- name: "Debug zone options results"
  debug:
    var: zone_info_options
  when: debug | default(false)

- name: "Debug FWD record results"
  debug:
    var: fwd_record_info.results
  when: debug | default(false)

# Assert name and type are valid from zone info.
- name: "Assert zones have correct name and type"
  assert:
    that:
      - zone_info_item.zone is defined
      - zone_info_item.zone.name == zone_info_item.zone_item.zone 
      - zone_info_item.zone.type == zone_info_item.zone_item.type 
    quiet: true
  loop: "{{ zone_info_results.results }}"
  loop_control:
    loop_var: zone_info_item
    label: "{{ zone_info_item.zone_item.zone }} ({{ zone_info_item.zone_item.type }})"

# Assert zones have correct options. If that option isn't set for that zone, set it to [] and pass.
- name: "Assert zones have correct options"
  assert:
    that:
      - zone_options_item.options is defined
      - zone_options_item.options.primaryNameServerAddresses | default([]) == zone_options_item.zone_item.primaryNameServerAddresses | default([])
      - zone_options_item.options.primaryZoneTransferProtocol | default([]) == zone_options_item.zone_item.zoneTransferProtocol | default([])
      - zone_options_item.options.dnssecStatus | default([]) == zone_options_item.zone_item.dnssecStatus | default([])
    quiet: true
  loop: "{{ zone_info_options.results }}"
  loop_control:
    loop_var: zone_options_item
    label: "{{ zone_options_item.zone_item.zone }} ({{ zone_options_item.zone_item.type }})"

# Assert FWD zones have correct forwarder options. Only asserts if the FWD record exists.
- name: "Assert FWD zones have correct forwarder options"
  assert:
    that:
      - (fwd_record_item.records | selectattr('type', 'equalto', 'FWD') | map(attribute='rData') | map(attribute='forwarder') | list | first) == fwd_record_item.zone_item.forwarder
      - (fwd_record_item.records | selectattr('type', 'equalto', 'FWD') | map(attribute='rData') | map(attribute='protocol') | list | first) == fwd_record_item.zone_item.protocol
    quiet: false
  loop: "{{ fwd_record_info.results }}"
  loop_control:
    loop_var: fwd_record_item
    label: "{{ fwd_record_item.zone_item.zone }}"
  when: fwd_record_item.records is defined

# Phase 5: Test Idempotency - Create same zones again
- name: "Idempotency - Check mode - Create DNS zones for testing"
  technitium_dns_create_zone:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: "{{ zone_item.zone }}"
    type: "{{ zone_item.type }}"
    # Optional parameters with defaults
    catalog: "{{ zone_item.catalog | default(omit) }}"
    useSoaSerialDateScheme: "{{ zone_item.useSoaSerialDateScheme | default(omit) }}"
    # Secondary/Stub zone parameters
    primaryNameServerAddresses: "{{ zone_item.primaryNameServerAddresses | default(omit) }}"
    zoneTransferProtocol: "{{ zone_item.zoneTransferProtocol | default(omit) }}"
    tsigKeyName: "{{ zone_item.tsigKeyName | default(omit) }}"
    validateZone: "{{ zone_item.validateZone | default(omit) }}"
    # Forwarder zone parameters
    initializeForwarder: "{{ zone_item.initializeForwarder | default(omit) }}"
    protocol: "{{ zone_item.protocol | default(omit) }}"
    forwarder: "{{ zone_item.forwarder | default(omit) }}"
    dnssecValidation: "{{ zone_item.dnssecValidation | default(omit) }}"
    # Proxy parameters
    proxyType: "{{ zone_item.proxyType | default(omit) }}"
    proxyAddress: "{{ zone_item.proxyAddress | default(omit) }}"
    proxyPort: "{{ zone_item.proxyPort | default(omit) }}"
    proxyUsername: "{{ zone_item.proxyUsername | default(omit) }}"
    proxyPassword: "{{ zone_item.proxyPassword | default(omit) }}"
  check_mode: true # Enable check mode
  register: zone_checkmode_creation_results
  loop: "{{ zones_to_create | default([]) }}"
  loop_control:
    loop_var: zone_item
    label: "{{ zone_item.zone }} ({{ zone_item.type }})"

- name: "Idempotency - Assert no change"
  ansible.builtin.assert:
    that:
      - item.changed == false
    quiet: true
  loop: "{{ zone_checkmode_creation_results.results }}"
  loop_control:
    label: "{{ item.zone_item.zone }}"

- name: "Idempotency - Create DNS zones for testing"
  technitium_dns_create_zone:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: "{{ zone_item.zone }}"
    type: "{{ zone_item.type }}"
    # Optional parameters with defaults
    catalog: "{{ zone_item.catalog | default(omit) }}"
    useSoaSerialDateScheme: "{{ zone_item.useSoaSerialDateScheme | default(omit) }}"
    # Secondary/Stub zone parameters
    primaryNameServerAddresses: "{{ zone_item.primaryNameServerAddresses | default(omit) }}"
    zoneTransferProtocol: "{{ zone_item.zoneTransferProtocol | default(omit) }}"
    tsigKeyName: "{{ zone_item.tsigKeyName | default(omit) }}"
    validateZone: "{{ zone_item.validateZone | default(omit) }}"
    # Forwarder zone parameters
    initializeForwarder: "{{ zone_item.initializeForwarder | default(omit) }}"
    protocol: "{{ zone_item.protocol | default(omit) }}"
    forwarder: "{{ zone_item.forwarder | default(omit) }}"
    dnssecValidation: "{{ zone_item.dnssecValidation | default(omit) }}"
    # Proxy parameters
    proxyType: "{{ zone_item.proxyType | default(omit) }}"
    proxyAddress: "{{ zone_item.proxyAddress | default(omit) }}"
    proxyPort: "{{ zone_item.proxyPort | default(omit) }}"
    proxyUsername: "{{ zone_item.proxyUsername | default(omit) }}"
    proxyPassword: "{{ zone_item.proxyPassword | default(omit) }}"
  register: zone_creation_results
  loop: "{{ zones_to_create | default([]) }}"
  loop_control:
    loop_var: zone_item
    label: "{{ zone_item.zone }} ({{ zone_item.type }})"

- name: "Idempotency - Assert no change"
  ansible.builtin.assert:
    that:
      - item.changed == false
    quiet: true
  loop: "{{ zone_creation_results.results }}"
  loop_control:
    label: "{{ item.zone_item.zone }}"

# Phase 6: Test Failure Cases
- name: "Test creation with empty zone name"
  technitium.dns.technitium_dns_create_zone:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: ""
    type: "Primary"
  register: empty_zone_result
  ignore_errors: true

- name: "Assert empty zone name fails appropriately"
  assert:
    that:
      - empty_zone_result.failed
      - "'zone' in empty_zone_result.msg or 'required' in empty_zone_result.msg"
    fail_msg: "Empty zone name should have failed validation"

- name: "Test creation with invalid zone type"
  technitium.dns.technitium_dns_create_zone:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: "invalid-type.{{ test_suffix }}"
    type: "InvalidType"
  register: invalid_type_result
  ignore_errors: true

- name: "Assert invalid zone type fails appropriately"
  assert:
    that:
      - invalid_type_result.failed
      - "'must be one of' in invalid_type_result.msg"
    fail_msg: "Invalid zone type should have failed validation"

- name: "Test Forwarder zone without required forwarder parameter"
  technitium.dns.technitium_dns_create_zone:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: "missing-forwarder.{{ test_suffix }}"
    type: "Forwarder"
  register: missing_forwarder_result
  ignore_errors: true

- name: "Assert missing forwarder parameter fails appropriately"
  assert:
    that:
      - missing_forwarder_result.failed
      - "'forwarder' in missing_forwarder_result.msg or 'required' in missing_forwarder_result.msg"
    fail_msg: "Missing forwarder parameter should have failed"

- name: "Test Primary zone without unsupported parameter"
  technitium.dns.technitium_dns_create_zone:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: "missing-forwarder.{{ test_suffix }}"
    type: "Primary"
    primaryNameServerAddresses: "8.8.8.8"
  register: invalid_parameter_result
  ignore_errors: true

- name: "Assert invalid zone type fails appropriately"
  assert:
    that:
      - invalid_parameter_result.failed
      - "'is not supported' in invalid_parameter_result.msg"
    fail_msg: "Invalid parameter should have failed validation"