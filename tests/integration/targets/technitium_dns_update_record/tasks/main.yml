---
# Integration tests for technitium_dns_update_record
# Provides extensive coverage of all supported record types and parameters

- name: "Load test configuration"
  include_vars: ../vars/config.yml

- name: "Load test data"
  include_vars: ../vars/test_data.yml

- name: "Clean up test zones"
  technitium.dns.technitium_dns_delete_zone:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    zone: "{{ item.zone }}"
    validate_certs: "{{ validate_certs | default(true) }}"
  loop: "{{ zones_to_create }}"
  ignore_errors: true

- name: "Create test zones"
  technitium.dns.technitium_dns_create_zone:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    zone: "{{ item.zone }}"
    type: "{{ item.type }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    forwarder: "{{ item.forwarder | default(omit) }}"
  loop: "{{ zones_to_create }}"
  register: zone_creation_results
  
- name: "Wait for zone creation"
  pause:
    seconds: 2

# Sign DNSSEC zones to generate DNSKEY records
- name: "Sign DNSSEC zones"
  technitium.dns.technitium_dns_sign_zone:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    zone: "{{ item.zone }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    algorithm: "{{ zone_item.dnssec_algorithm | default('RSA') }}"
    # RSA-specific parameters
    hashAlgorithm: "{{ zone_item.dnssec_hash_algorithm | default('SHA256') if (zone_item.dnssec_algorithm | default('RSA')) == 'RSA' else omit }}"
    kskKeySize: "{{ zone_item.ksk_key_size | default(2048) if (zone_item.dnssec_algorithm | default('RSA')) == 'RSA' else omit }}"
    zskKeySize: "{{ zone_item.zsk_key_size | default(1024) if (zone_item.dnssec_algorithm | default('RSA')) == 'RSA' else omit }}"
    # ECDSA/EDDSA-specific parameters
    curve: "{{ zone_item.dnssec_curve | default('P256') if (zone_item.dnssec_algorithm | default('RSA')) in ['ECDSA', 'EDDSA'] else omit }}"
    # Common optional parameters
    pemKskPrivateKey: "{{ zone_item.pem_ksk_private_key | default(omit) }}"
    pemZskPrivateKey: "{{ zone_item.pem_zsk_private_key | default(omit) }}"
    dnsKeyTtl: "{{ zone_item.dns_key_ttl | default(omit) }}"
    zskRolloverDays: "{{ zone_item.zsk_rollover_days | default(omit) }}"
    nxProof: "{{ zone_item.nx_proof | default('NSEC') }}"
    iterations: "{{ zone_item.nsec3_iterations | default(omit) }}"
    saltLength: "{{ zone_item.nsec3_salt_length | default(omit) }}"
  loop: "{{ zones_to_create }}"
  when: item.dnssec is defined and item.dnssec
  register: zone_signing_results

- name: "Wait for zone signing to complete"
  pause:
    seconds: 3
  when: zone_signing_results.changed

# DS Record digest derivation (for DNSSEC signed zones)
- name: "Get DNSKEY records for digest derivation (sec zone)"
  technitium.dns.technitium_dns_get_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    zone: "sec-update.{{ test_suffix }}"
    name: "sec-update.{{ test_suffix }}"
  register: ds_dnskey_query
  when: "'sec-update.' ~ test_suffix in (zones_to_create | map(attribute='zone') | list)"

- name: "Derive SHA256 & SHA384 digests from DNSKEY set"
  ansible.builtin.set_fact:
    ds_sha256_digest: >-
      {{
        ds_dnskey_query.api_response.response.records
        | selectattr('type','equalto','DNSKEY')
        | map(attribute='rData')
        | map(attribute='computedDigests')
        | select('defined')
        | map('selectattr','digestType','equalto','SHA256')
        | map('list')
        | map('first')
        | select('defined')
        | map(attribute='digest')
        | list | first
      }}
    ds_sha384_digest: >-
      {{
        ds_dnskey_query.api_response.response.records
        | selectattr('type','equalto','DNSKEY')
        | map(attribute='rData')
        | map(attribute='computedDigests')
        | select('defined')
        | map('selectattr','digestType','equalto','SHA384')
        | map('list')
        | map('first')
        | select('defined')
        | map(attribute='digest')
        | list | first
      }}
  when: ds_dnskey_query is defined and not ds_dnskey_query.failed

# Phase 1: Create initial test records
- name: "Create initial test records"
  technitium.dns.technitium_dns_add_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    name: "{{ record_item.domain }}"
    zone: "{{ record_item.zone | default(omit) }}"
    type: "{{ record_item.type }}"
    ttl: "{{ record_item.ttl | default(3600) }}"
    # A/AAAA records
    ipAddress: "{{ record_item.ipAddress | default(omit) }}"
    # NS records
    nameServer: "{{ record_item.nameServer | default(omit) }}"
    # CNAME records  
    cname: "{{ record_item.current_cname | default(omit) }}"
    # PTR records
    ptrName: "{{ record_item.ptrName | default(omit) }}"
    # MX records
    preference: "{{ record_item.preference | default(omit) }}"
    exchange: "{{ record_item.exchange | default(omit) }}"
    # TXT records
    text: "{{ record_item.text | default(omit) }}"
    # SRV records
    priority: "{{ record_item.priority | default(omit) }}"
    weight: "{{ record_item.weight | default(omit) }}"
    srv_port: "{{ record_item.srv_port | default(omit) }}"
    target: "{{ record_item.target | default(omit) }}"
    # CAA records
    flags: "{{ record_item.flags | default(omit) }}"
    tag: "{{ record_item.tag | default(omit) }}"
    value: "{{ record_item.value | default(omit) }}"
    # NAPTR records
    naptrOrder: "{{ record_item.naptrOrder | default(omit) }}"
    naptrPreference: "{{ record_item.naptrPreference | default(omit) }}"
    naptrFlags: "{{ record_item.naptrFlags | default(omit) }}"
    naptrServices: "{{ record_item.naptrServices | default(omit) }}"
    naptrRegexp: "{{ record_item.naptrRegexp | default(omit) }}"
    naptrReplacement: "{{ record_item.naptrReplacement | default(omit) }}"
    # DNAME records
    dname: "{{ record_item.current_dname | default(omit) }}"
    # DS records
    keyTag: "{{ record_item.keyTag | default(omit) }}"
    algorithm: "{{ record_item.algorithm | default(omit) }}"
    digestType: "{{ record_item.digestType | default(omit) }}"
    digest: "{{ record_item.digest | default(omit) }}"
    # SSHFP records
    sshfpAlgorithm: "{{ record_item.sshfpAlgorithm | default(omit) }}"
    sshfpFingerprintType: "{{ record_item.sshfpFingerprintType | default(omit) }}"
    sshfpFingerprint: "{{ record_item.sshfpFingerprint | default(omit) }}"
    # TLSA records
    tlsaCertificateUsage: "{{ record_item.tlsaCertificateUsage | default(omit) }}"
    tlsaSelector: "{{ record_item.tlsaSelector | default(omit) }}"
    tlsaMatchingType: "{{ record_item.tlsaMatchingType | default(omit) }}"
    tlsaCertificateAssociationData: "{{ record_item.tlsaCertificateAssociationData | default(omit) }}"
    # SVCB/HTTPS records
    svcPriority: "{{ record_item.svcPriority | default(omit) }}"
    svcTargetName: "{{ record_item.svcTargetName | default(omit) }}"
    svcParams: "{{ record_item.svcParams | default(omit) }}"
    # URI records
    uriPriority: "{{ record_item.uriPriority | default(omit) }}"
    uriWeight: "{{ record_item.uriWeight | default(omit) }}"
    uri: "{{ record_item.uri | default(omit) }}"
    # ANAME records
    aname: "{{ record_item.aname | default(omit) }}"
    # FWD records
    protocol: "{{ record_item.protocol | default(omit) }}"
    forwarder: "{{ record_item.forwarder | default(omit) }}"
    forwarderPriority: "{{ record_item.forwarderPriority | default(omit) }}"
    proxyType: "{{ record_item.proxyType | default(omit) }}"
    proxyAddress: "{{ record_item.proxyAddress | default(omit) }}"
    proxyPort: "{{ record_item.proxyPort | default(omit) }}"
    # APP records
    appName: "{{ record_item.current_appName | default(omit) }}"
    classPath: "{{ record_item.current_classPath | default(omit) }}"
    recordData: "{{ record_item.current_recordData | default(omit) }}"
    # UNKNOWN records
    rdata: "{{ record_item.rdata | default(omit) }}"
    # Common parameters
    comments: "{{ record_item.comments | default(omit) }}"
  loop: "{{ test_records }}"
  loop_control:
    loop_var: record_item
    label: "{{ record_item.domain }} ({{ record_item.type }})"
  register: record_creation_results

- name: "Assert all records were created successfully"
  ansible.builtin.assert:
    that:
      - item.changed
    quiet: true
  loop: "{{ record_creation_results.results }}"
  loop_control:
    label: "{{ item.record_item.domain }}"

# Phase 2: Update all test records
- name: "Update all test records"
  technitium.dns.technitium_dns_update_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    name: "{{ record_item.domain }}"
    zone: "{{ record_item.zone | default(omit) }}"
    type: "{{ record_item.type }}"
    # Current parameters (for identification) - only needed for record types that require them
    ipAddress: "{{ record_item.ipAddress | default(omit) }}"
    nameServer: "{{ record_item.nameServer | default(record_item.current_nameServer) | default(omit) }}"
    ptrName: "{{ record_item.ptrName | default(record_item.current_ptrName) | default(omit) }}"
    preference: "{{ record_item.preference | default(omit) }}"
    exchange: "{{ record_item.exchange | default(omit) }}"
    text: "{{ record_item.text | default(omit) }}"
    priority: "{{ record_item.priority | default(omit) }}"
    weight: "{{ record_item.weight | default(omit) }}"
    srv_port: "{{ record_item.srv_port | default(omit) }}"
    target: "{{ record_item.target | default(omit) }}"
    flags: "{{ record_item.flags | default(omit) }}"
    tag: "{{ record_item.tag | default(omit) }}"
    value: "{{ record_item.value | default(omit) }}"
    naptrOrder: "{{ record_item.naptrOrder | default(omit) }}"
    naptrPreference: "{{ record_item.naptrPreference | default(omit) }}"
    naptrFlags: "{{ record_item.naptrFlags | default(omit) }}"
    naptrServices: "{{ record_item.naptrServices | default(omit) }}"
    naptrRegexp: "{{ record_item.naptrRegexp | default(omit) }}"
    naptrReplacement: "{{ record_item.naptrReplacement | default(omit) }}"
    keyTag: "{{ record_item.keyTag | default(omit) }}"
    algorithm: "{{ record_item.algorithm | default(omit) }}"
    digestType: "{{ record_item.digestType | default(omit) }}"
    digest: "{{ record_item.digest | default(omit) }}"
    sshfpAlgorithm: "{{ record_item.sshfpAlgorithm | default(omit) }}"
    sshfpFingerprintType: "{{ record_item.sshfpFingerprintType | default(omit) }}"
    sshfpFingerprint: "{{ record_item.sshfpFingerprint | default(omit) }}"
    tlsaCertificateUsage: "{{ record_item.tlsaCertificateUsage | default(omit) }}"
    tlsaSelector: "{{ record_item.tlsaSelector | default(omit) }}"
    tlsaMatchingType: "{{ record_item.tlsaMatchingType | default(omit) }}"
    tlsaCertificateAssociationData: "{{ record_item.tlsaCertificateAssociationData | default(omit) }}"
    svcPriority: "{{ record_item.svcPriority | default(omit) }}"
    svcTargetName: "{{ record_item.svcTargetName | default(omit) }}"
    svcParams: "{{ record_item.svcParams | default(omit) }}"
    uriPriority: "{{ record_item.uriPriority | default(omit) }}"
    uriWeight: "{{ record_item.uriWeight | default(omit) }}"
    uri: "{{ record_item.uri | default(omit) }}"
    aname: "{{ record_item.aname | default(omit) }}"
    protocol: "{{ record_item.protocol | default(omit) }}"
    forwarder: "{{ record_item.forwarder | default(omit) }}"
    forwarderPriority: "{{ record_item.forwarderPriority | default(omit) }}"
    proxyType: "{{ record_item.proxyType | default(omit) }}"
    proxyAddress: "{{ record_item.proxyAddress | default(omit) }}"
    proxyPort: "{{ record_item.proxyPort | default(omit) }}"
    # Parameters that don't use 'new' prefix - updated directly
    cname: "{{ record_item.cname | default(omit) }}"
    dname: "{{ record_item.dname | default(omit) }}"
    appName: "{{ record_item.appName | default(omit) }}"
    classPath: "{{ record_item.classPath | default(omit) }}"
    recordData: "{{ record_item.recordData | default(omit) }}"
    comments: "{{ record_item.comments | default(omit) }}"
    ttl: "{{ record_item.ttl | default(3600) }}"
    # New parameters (the updates)
    newIpAddress: "{{ record_item.newIpAddress | default(omit) }}"
    newNameServer: "{{ record_item.newNameServer | default(omit) }}"
    newPreference: "{{ record_item.newPreference | default(omit) }}"
    newExchange: "{{ record_item.newExchange | default(omit) }}"
    newText: "{{ record_item.newText | default(omit) }}"
    newPriority: "{{ record_item.newPriority | default(omit) }}"
    newWeight: "{{ record_item.newWeight | default(omit) }}"
    newSrvPort: "{{ record_item.newSrvPort | default(omit) }}"
    newTarget: "{{ record_item.newTarget | default(omit) }}"
    newFlags: "{{ record_item.newFlags | default(omit) }}"
    newTag: "{{ record_item.newTag | default(omit) }}"
    newValue: "{{ record_item.newValue | default(omit) }}"
    newPtrName: "{{ record_item.newPtrName | default(omit) }}"
    naptrNewOrder: "{{ record_item.naptrNewOrder | default(omit) }}"
    naptrNewPreference: "{{ record_item.naptrNewPreference | default(omit) }}"
    naptrNewFlags: "{{ record_item.naptrNewFlags | default(omit) }}"
    naptrNewServices: "{{ record_item.naptrNewServices | default(omit) }}"
    naptrNewRegexp: "{{ record_item.naptrNewRegexp | default(omit) }}"
    naptrNewReplacement: "{{ record_item.naptrNewReplacement | default(omit) }}"
    # DNAME updates: use 'dname' directly, no 'new' prefix
    dname: "{{ record_item.dname | default(omit) }}"
    newKeyTag: "{{ record_item.newKeyTag | default(omit) }}"
    newAlgorithm: "{{ record_item.newAlgorithm | default(omit) }}"
    newDigestType: "{{ record_item.newDigestType | default(omit) }}"
    newDigest: "{{ record_item.newDigest | default(omit) }}"
    newSshfpAlgorithm: "{{ record_item.newSshfpAlgorithm | default(omit) }}"
    newSshfpFingerprintType: "{{ record_item.newSshfpFingerprintType | default(omit) }}"
    newSshfpFingerprint: "{{ record_item.newSshfpFingerprint | default(omit) }}"
    newTlsaCertificateUsage: "{{ record_item.newTlsaCertificateUsage | default(omit) }}"
    newTlsaSelector: "{{ record_item.newTlsaSelector | default(omit) }}"
    newTlsaMatchingType: "{{ record_item.newTlsaMatchingType | default(omit) }}"
    newTlsaCertificateAssociationData: "{{ record_item.newTlsaCertificateAssociationData | default(omit) }}"
    newSvcPriority: "{{ record_item.newSvcPriority | default(omit) }}"
    newSvcTargetName: "{{ record_item.newSvcTargetName | default(omit) }}"
    newSvcParams: "{{ record_item.newSvcParams | default(omit) }}"
    newUriPriority: "{{ record_item.newUriPriority | default(omit) }}"
    newUriWeight: "{{ record_item.newUriWeight | default(omit) }}"
    newUri: "{{ record_item.newUri | default(omit) }}"
    newAName: "{{ record_item.newAName | default(omit) }}"
    newProtocol: "{{ record_item.newProtocol | default(omit) }}"
    newForwarder: "{{ record_item.newForwarder | default(omit) }}"
    # UNKNOWN record parameters
    rdata: "{{ record_item.rdata | default(omit) }}"
    newRData: "{{ record_item.newRData | default(omit) }}"
  loop: "{{ test_records }}"
  loop_control:
    loop_var: record_item
    label: "{{ record_item.domain }} ({{ record_item.type }})"
  register: update_results

- name: "Assert all updates were successful"
  ansible.builtin.assert:
    that:
      - item.changed
    quiet: true
  loop: "{{ update_results.results }}"
  loop_control:
    label: "{{ item.record_item.domain }}"
  when: item.skipped is not defined

# Phase 3: Verify updated records have correct values
- name: "Verify updated records have correct values"
  technitium.dns.technitium_dns_get_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    name: "{{ record_item.domain }}"
    zone: "{{ record_item.zone | default(omit) }}"
  loop: "{{ test_records }}"
  loop_control:
    loop_var: record_item
    label: "{{ record_item.domain }} ({{ record_item.type }})"
  register: verification_results

# Phase 4: Idempotency tests - Run update again with same values to ensure no changes
- name: "Test idempotency - update records with same values (should show no changes)"
  technitium.dns.technitium_dns_update_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    name: "{{ record_item.domain }}"
    zone: "{{ record_item.zone | default(omit) }}"
    type: "{{ record_item.type }}"
    # Current parameters (for identification) - use current/updated values to find existing record
    ipAddress: "{{ record_item.newIpAddress if record_item.newIpAddress is defined else record_item.ipAddress | default(omit) }}"
    nameServer: "{{ record_item.newNameServer if record_item.newNameServer is defined else record_item.nameServer | default(record_item.current_nameServer) | default(omit) }}"
    ptrName: "{{ record_item.newPtrName if record_item.newPtrName is defined else record_item.ptrName | default(record_item.current_ptrName) | default(omit) }}"
    preference: "{{ record_item.newPreference if record_item.newPreference is defined else record_item.preference | default(omit) }}"
    exchange: "{{ record_item.newExchange if record_item.newExchange is defined else record_item.exchange | default(omit) }}"
    text: "{{ record_item.newText if record_item.newText is defined else record_item.text | default(omit) }}"
    priority: "{{ record_item.newPriority if record_item.newPriority is defined else record_item.priority | default(omit) }}"
    weight: "{{ record_item.newWeight if record_item.newWeight is defined else record_item.weight | default(omit) }}"
    srv_port: "{{ record_item.newSrvPort if record_item.newSrvPort is defined else record_item.srv_port | default(omit) }}"
    target: "{{ record_item.newTarget if record_item.newTarget is defined else record_item.target | default(omit) }}"
    flags: "{{ record_item.newFlags if record_item.newFlags is defined else record_item.flags | default(omit) }}"
    tag: "{{ record_item.newTag if record_item.newTag is defined else record_item.tag | default(omit) }}"
    value: "{{ record_item.newValue if record_item.newValue is defined else record_item.value | default(omit) }}"
    naptrOrder: "{{ record_item.naptrNewOrder if record_item.naptrNewOrder is defined else record_item.naptrOrder | default(omit) }}"
    naptrPreference: "{{ record_item.naptrNewPreference if record_item.naptrNewPreference is defined else record_item.naptrPreference | default(omit) }}"
    naptrFlags: "{{ record_item.naptrNewFlags if record_item.naptrNewFlags is defined else record_item.naptrFlags | default(omit) }}"
    naptrServices: "{{ record_item.naptrNewServices if record_item.naptrNewServices is defined else record_item.naptrServices | default(omit) }}"
    naptrRegexp: "{{ record_item.naptrNewRegexp if record_item.naptrNewRegexp is defined else record_item.naptrRegexp | default(omit) }}"
    naptrReplacement: "{{ record_item.naptrNewReplacement if record_item.naptrNewReplacement is defined else record_item.naptrReplacement | default(omit) }}"
    keyTag: "{{ record_item.newKeyTag if record_item.newKeyTag is defined else record_item.keyTag | default(omit) }}"
    algorithm: "{{ record_item.newAlgorithm if record_item.newAlgorithm is defined else record_item.algorithm | default(omit) }}"
    digestType: "{{ record_item.newDigestType if record_item.newDigestType is defined else record_item.digestType | default(omit) }}"
    digest: "{{ record_item.newDigest if record_item.newDigest is defined else record_item.digest | default(omit) }}"
    sshfpAlgorithm: "{{ record_item.newSshfpAlgorithm if record_item.newSshfpAlgorithm is defined else record_item.sshfpAlgorithm | default(omit) }}"
    sshfpFingerprintType: "{{ record_item.newSshfpFingerprintType if record_item.newSshfpFingerprintType is defined else record_item.sshfpFingerprintType | default(omit) }}"
    sshfpFingerprint: "{{ record_item.newSshfpFingerprint if record_item.newSshfpFingerprint is defined else record_item.sshfpFingerprint | default(omit) }}"
    tlsaCertificateUsage: "{{ record_item.newTlsaCertificateUsage if record_item.newTlsaCertificateUsage is defined else record_item.tlsaCertificateUsage | default(omit) }}"
    tlsaSelector: "{{ record_item.newTlsaSelector if record_item.newTlsaSelector is defined else record_item.tlsaSelector | default(omit) }}"
    tlsaMatchingType: "{{ record_item.newTlsaMatchingType if record_item.newTlsaMatchingType is defined else record_item.tlsaMatchingType | default(omit) }}"
    tlsaCertificateAssociationData: "{{ record_item.newTlsaCertificateAssociationData if record_item.newTlsaCertificateAssociationData is defined else record_item.tlsaCertificateAssociationData | default(omit) }}"
    svcPriority: "{{ record_item.newSvcPriority if record_item.newSvcPriority is defined else record_item.svcPriority | default(omit) }}"
    svcTargetName: "{{ record_item.newSvcTargetName if record_item.newSvcTargetName is defined else record_item.svcTargetName | default(omit) }}"
    svcParams: "{{ record_item.newSvcParams if record_item.newSvcParams is defined else record_item.svcParams | default(omit) }}"
    uriPriority: "{{ record_item.newUriPriority if record_item.newUriPriority is defined else record_item.uriPriority | default(omit) }}"
    uriWeight: "{{ record_item.newUriWeight if record_item.newUriWeight is defined else record_item.uriWeight | default(omit) }}"
    uri: "{{ record_item.newUri if record_item.newUri is defined else record_item.uri | default(omit) }}"
    aname: "{{ record_item.newAName if record_item.newAName is defined else record_item.aname | default(omit) }}"
    protocol: "{{ record_item.newProtocol if record_item.newProtocol is defined else record_item.protocol | default(omit) }}"
    forwarder: "{{ record_item.newForwarder if record_item.newForwarder is defined else record_item.forwarder | default(omit) }}"
    forwarderPriority: "{{ record_item.forwarderPriority | default(omit) }}"
    proxyType: "{{ record_item.proxyType | default(omit) }}"
    proxyAddress: "{{ record_item.proxyAddress | default(omit) }}"
    proxyPort: "{{ record_item.proxyPort | default(omit) }}"
    # Parameters that don't use 'new' prefix - use updated values from Phase 2
    cname: "{{ record_item.cname | default(omit) }}"
    dname: "{{ record_item.dname | default(omit) }}"
    appName: "{{ record_item.appName | default(omit) }}"
    classPath: "{{ record_item.classPath | default(omit) }}"
    recordData: "{{ record_item.recordData | default(omit) }}"
    comments: "{{ record_item.comments | default(omit) }}"
    ttl: "{{ record_item.ttl | default(3600) }}"
    # New parameters - use the same new values again to test idempotency
    newIpAddress: "{{ record_item.newIpAddress | default(omit) }}"
    newNameServer: "{{ record_item.newNameServer | default(omit) }}"
    newPreference: "{{ record_item.newPreference | default(omit) }}"
    newExchange: "{{ record_item.newExchange | default(omit) }}"
    newText: "{{ record_item.newText | default(omit) }}"
    newPriority: "{{ record_item.newPriority | default(omit) }}"
    newWeight: "{{ record_item.newWeight | default(omit) }}"
    newSrvPort: "{{ record_item.newSrvPort | default(omit) }}"
    newTarget: "{{ record_item.newTarget | default(omit) }}"
    newFlags: "{{ record_item.newFlags | default(omit) }}"
    newTag: "{{ record_item.newTag | default(omit) }}"
    newValue: "{{ record_item.newValue | default(omit) }}"
    newPtrName: "{{ record_item.newPtrName | default(omit) }}"
    naptrNewOrder: "{{ record_item.naptrNewOrder | default(omit) }}"
    naptrNewPreference: "{{ record_item.naptrNewPreference | default(omit) }}"
    naptrNewFlags: "{{ record_item.naptrNewFlags | default(omit) }}"
    naptrNewServices: "{{ record_item.naptrNewServices | default(omit) }}"
    naptrNewRegexp: "{{ record_item.naptrNewRegexp | default(omit) }}"
    naptrNewReplacement: "{{ record_item.naptrNewReplacement | default(omit) }}"
    newKeyTag: "{{ record_item.newKeyTag | default(omit) }}"
    newAlgorithm: "{{ record_item.newAlgorithm | default(omit) }}"
    newDigestType: "{{ record_item.newDigestType | default(omit) }}"
    newDigest: "{{ record_item.newDigest | default(omit) }}"
    newSshfpAlgorithm: "{{ record_item.newSshfpAlgorithm | default(omit) }}"
    newSshfpFingerprintType: "{{ record_item.newSshfpFingerprintType | default(omit) }}"
    newSshfpFingerprint: "{{ record_item.newSshfpFingerprint | default(omit) }}"
    newTlsaCertificateUsage: "{{ record_item.newTlsaCertificateUsage | default(omit) }}"
    newTlsaSelector: "{{ record_item.newTlsaSelector | default(omit) }}"
    newTlsaMatchingType: "{{ record_item.newTlsaMatchingType | default(omit) }}"
    newTlsaCertificateAssociationData: "{{ record_item.newTlsaCertificateAssociationData | default(omit) }}"
    newSvcPriority: "{{ record_item.newSvcPriority | default(omit) }}"
    newSvcTargetName: "{{ record_item.newSvcTargetName | default(omit) }}"
    newSvcParams: "{{ record_item.newSvcParams | default(omit) }}"
    newUriPriority: "{{ record_item.newUriPriority | default(omit) }}"
    newUriWeight: "{{ record_item.newUriWeight | default(omit) }}"
    newUri: "{{ record_item.newUri | default(omit) }}"
    newAName: "{{ record_item.newAName | default(omit) }}"
    newProtocol: "{{ record_item.newProtocol | default(omit) }}"
    newForwarder: "{{ record_item.newForwarder | default(omit) }}"
    # UNKNOWN record parameters
    rdata: "{{ record_item.newRData if record_item.newRData is defined else record_item.rdata | default(omit) }}"
    newRData: "{{ record_item.newRData | default(omit) }}"
  loop: "{{ test_records }}"
  loop_control:
    loop_var: record_item
    label: "{{ record_item.domain }} ({{ record_item.type }})"
  register: idempotency_update_results

- name: "Assert idempotency - no changes should be made when updating with same values"
  ansible.builtin.assert:
    that:
      - not item.changed
    quiet: true
  loop: "{{ idempotency_update_results.results }}"
  loop_control:
    label: "{{ item.record_item.domain }}"
  when: item.skipped is not defined

# Phase 5: Negative tests
- name: "Run negative tests"
  technitium.dns.technitium_dns_update_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    name: "{{ test_item.domain }}"
    zone: "primary-update.{{ test_suffix }}"
    type: "{{ test_item.type }}"
    # Include all possible parameters that might be tested
    ipAddress: "{{ test_item.ipAddress | default(omit) }}"
    newIpAddress: "{{ test_item.newIpAddress | default(omit) }}"
    nameServer: "{{ test_item.nameServer | default(omit) }}"
    newNameServer: "{{ test_item.newNameServer | default(omit) }}"
    cname: "{{ test_item.newCnameTarget | default(test_item.cname) | default(omit) }}"
    preference: "{{ test_item.preference | default(omit) }}"
    newPreference: "{{ test_item.newPreference | default(omit) }}"
    exchange: "{{ test_item.exchange | default(omit) }}"
    newExchange: "{{ test_item.newExchange | default(omit) }}"
    text: "{{ test_item.text | default(omit) }}"
    newText: "{{ test_item.newText | default(omit) }}"
    priority: "{{ test_item.priority | default(omit) }}"
    newPriority: "{{ test_item.newPriority | default(omit) }}"
    weight: "{{ test_item.weight | default(omit) }}"
    newWeight: "{{ test_item.newWeight | default(omit) }}"
    srv_port: "{{ test_item.srv_port | default(omit) }}"
    newSrvPort: "{{ test_item.newSrvPort | default(omit) }}"
    target: "{{ test_item.target | default(omit) }}"
    newTarget: "{{ test_item.newTarget | default(omit) }}"
    flags: "{{ test_item.flags | default(omit) }}"
    newFlags: "{{ test_item.newFlags | default(omit) }}"
    tag: "{{ test_item.tag | default(omit) }}"
    newTag: "{{ test_item.newTag | default(omit) }}"
    value: "{{ test_item.value | default(omit) }}"
    newValue: "{{ test_item.newValue | default(omit) }}"
    ttl: "{{ test_item.ttl | default(omit) }}"
    newTtl: "{{ test_item.newTtl | default(omit) }}"
  loop: "{{ negative_tests }}"
  loop_control:
    loop_var: test_item
    label: "{{ test_item.test_scenario }}"
  register: negative_test_results
  ignore_errors: true

- name: "Assert negative tests failed as expected"
  ansible.builtin.assert:
    that:
      - item.failed
      - "item.test_item.expected_error in (item.msg | default(''))"
    quiet: true
  loop: "{{ negative_test_results.results }}"
  loop_control:
    label: "{{ item.test_item.test_scenario }}"

# Phase 6: Clean up test zones
- name: "Clean up test zones"
  technitium.dns.technitium_dns_delete_zone:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) | int }}"
    zone: "{{ item.zone }}"
    validate_certs: "{{ validate_certs | default(true) }}"
  loop: "{{ zones_to_create }}"
  ignore_errors: true
