---
# Integration test suite for technitium_dns_get_group_details
# This test validates group details retrieval functionality

# Phase 1: Setup - Load configuration and define test data
- name: "Load test configuration"
  include_vars: ../../integration_config.yml

- name: "Set test data"
  set_fact:
    test_group:
      name: "detailstest-{{ ansible_date_time.epoch }}"
      description: "Test group for details testing"
    test_user:
      username: "detailsuser-{{ ansible_date_time.epoch }}"
      password: "TestPass123!"
      displayName: "Details Test User"

# Phase 2: Create test group for details testing
- name: "Create test group for details testing"
  technitium_dns_create_group:
    api_url: "{{ technitium_api_url }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | int }}"
    validate_certs: "{{ validate_certs }}"
    group: "{{ test_group.name }}"
    description: "{{ test_group.description }}"
  register: group_creation_result

- name: "Assert test group was created successfully"
  assert:
    that:
      - group_creation_result.changed
      - not group_creation_result.failed
      - "'created' in group_creation_result.msg"
    fail_msg: "Test group should have been created successfully"

# Phase 3: Test getting group details for newly created group
- name: "Get details for test group"
  technitium_dns_get_group_details:
    api_url: "{{ technitium_api_url }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | int }}"
    validate_certs: "{{ validate_certs }}"
    group: "{{ test_group.name }}"
  register: group_details_result

- name: "Assert group details retrieval succeeded"
  assert:
    that:
      - not group_details_result.changed
      - not group_details_result.failed
      - group_details_result.group_details is defined
      - group_details_result.group_details.name == test_group.name
      - group_details_result.group_details.description == test_group.description
      - group_details_result.group_details.members is defined
      - group_details_result.group_details.users is defined
      - group_details_result.group_details.members | length == 0
    fail_msg: "Group details should be retrieved correctly"

# Phase 4: Create test user for membership testing
- name: "Create test user for membership testing"
  technitium_dns_create_user:
    api_url: "{{ technitium_api_url }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | int }}"
    validate_certs: "{{ validate_certs }}"
    username: "{{ test_user.username }}"
    password: "{{ test_user.password }}"
    displayName: "{{ test_user.displayName }}"
  register: user_creation_result

- name: "Assert test user was created successfully"
  assert:
    that:
      - user_creation_result.changed
      - not user_creation_result.failed
      - "'created' in user_creation_result.msg"
    fail_msg: "Test user should have been created successfully"

# Phase 5: Add user to test group
- name: "Add user to test group"
  technitium_dns_set_user_details:
    api_url: "{{ technitium_api_url }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | int }}"
    validate_certs: "{{ validate_certs }}"
    username: "{{ test_user.username }}"
    memberOfGroups:
      - "{{ test_group.name }}"
  register: user_group_assignment_result

- name: "Assert user was added to group successfully"
  assert:
    that:
      - user_group_assignment_result.changed
      - not user_group_assignment_result.failed
      - "'updated successfully' in user_group_assignment_result.msg"
    fail_msg: "User should have been added to group successfully"

# Phase 6: Get group details again to verify user membership
- name: "Get group details after adding user"
  technitium_dns_get_group_details:
    api_url: "{{ technitium_api_url }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | int }}"
    validate_certs: "{{ validate_certs }}"
    group: "{{ test_group.name }}"
  register: group_details_with_user_result

- name: "Assert group details include the new user"
  assert:
    that:
      - not group_details_with_user_result.changed
      - not group_details_with_user_result.failed
      - group_details_with_user_result.group_details.name == test_group.name
      - group_details_with_user_result.group_details.description == test_group.description
      - test_user.username in group_details_with_user_result.group_details.members
      - test_user.username in group_details_with_user_result.group_details.users
      - group_details_with_user_result.group_details.members | length == 1
    fail_msg: "Group details should show the user as a member"

# Phase 7: Test getting details for built-in groups
- name: "Get details for Administrators group"
  technitium_dns_get_group_details:
    api_url: "{{ technitium_api_url }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | int }}"
    validate_certs: "{{ validate_certs }}"
    group: "Administrators"
  register: admin_group_details_result

- name: "Assert Administrators group details are correct"
  assert:
    that:
      - not admin_group_details_result.changed
      - not admin_group_details_result.failed
      - admin_group_details_result.group_details.name == "Administrators"
      - admin_group_details_result.group_details.description == "Super administrators"
      - admin_group_details_result.group_details.members is defined
      - admin_group_details_result.group_details.users is defined
      - admin_group_details_result.group_details.members | length > 0
    fail_msg: "Administrators group should have expected details and members"

# Phase 8: Test failure cases
- name: "Test with non-existent group"
  technitium_dns_get_group_details:
    api_url: "{{ technitium_api_url }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | int }}"
    validate_certs: "{{ validate_certs }}"
    group: "nonexistentgroup-{{ ansible_date_time.epoch }}"
  register: nonexistent_group_result
  ignore_errors: true

- name: "Assert failure with non-existent group"
  assert:
    that:
      - nonexistent_group_result.failed
      - "'does not exist' in nonexistent_group_result.msg"
    fail_msg: "Non-existent group should cause clean failure"

- name: "Test with invalid API token"
  technitium_dns_get_group_details:
    api_url: "{{ technitium_api_url }}"
    api_token: "invalid_token_12345"
    api_port: "{{ technitium_api_port | int }}"
    validate_certs: "{{ validate_certs }}"
    group: "{{ test_group.name }}"
  register: invalid_token_result
  ignore_errors: true

- name: "Assert failure with invalid API token"
  assert:
    that:
      - invalid_token_result.failed
      - "'Invalid token' in (invalid_token_result.msg) or 'Failed to check existing groups' in (invalid_token_result.msg)"
    fail_msg: "Invalid token should cause failure"

# Phase 9: Test idempotency (same results on multiple calls)
- name: "Get group details again to test consistency"
  technitium_dns_get_group_details:
    api_url: "{{ technitium_api_url }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | int }}"
    validate_certs: "{{ validate_certs }}"
    group: "{{ test_group.name }}"
  register: group_details_second_result

- name: "Assert consistent results between calls"
  assert:
    that:
      - not group_details_second_result.changed
      - not group_details_second_result.failed
      - group_details_second_result.group_details.name == group_details_with_user_result.group_details.name
      - group_details_second_result.group_details.description == group_details_with_user_result.group_details.description
      - group_details_second_result.group_details.members | length == group_details_with_user_result.group_details.members | length
      - test_user.username in group_details_second_result.group_details.members
    fail_msg: "Multiple calls should return consistent results"

# Phase 10: Cleanup - Delete test user and group
- name: "Delete test user (cleanup)"
  technitium_dns_delete_user:
    api_url: "{{ technitium_api_url }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | int }}"
    validate_certs: "{{ validate_certs }}"
    username: "{{ test_user.username }}"
  ignore_errors: true

- name: "Delete test group (cleanup)"
  technitium_dns_delete_group:
    api_url: "{{ technitium_api_url }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | int }}"
    validate_certs: "{{ validate_certs }}"
    group: "{{ test_group.name }}"
  ignore_errors: true