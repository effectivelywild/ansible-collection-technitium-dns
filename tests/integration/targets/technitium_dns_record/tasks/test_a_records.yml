---
# A Record Tests for technitium_dns_record module
# Tests record set functionality with 'records' parameter and overwrite modes

# =============================================================================
# Test 1: Shorthand Single Record - Create, Update, Delete
# =============================================================================
- name: "Test 1.1: Create single A record using shorthand syntax"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "shorthand-test.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    ipAddress: "192.0.2.10"
    ttl: 3600
    comments: "Created via shorthand"
    state: present
  register: test1_create

- name: "Test 1.1: Debug create result"
  ansible.builtin.debug:
    var: test1_create

- name: "Test 1.1: Assert record was created"
  ansible.builtin.assert:
    that:
      - test1_create is changed

- name: "Test 1.2: Verify record exists with correct values"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "shorthand-test.{{ primary_zone_name }}"
  register: test1_verify

- name: "Test 1.2: Assert record values"
  ansible.builtin.assert:
    that:
      - test1_verify.records | length == 1
      - test1_verify.records[0].type == 'A'
      - test1_verify.records[0].rData.ipAddress == '192.0.2.10'
      - test1_verify.records[0].ttl == 3600

- name: "Test 1.3: Idempotency - Run same create again"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "shorthand-test.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    ipAddress: "192.0.2.10"
    ttl: 3600
    comments: "Created via shorthand"
    state: present
  register: test1_idempotent

- name: "Test 1.3: Assert no changes"
  ansible.builtin.assert:
    that:
      - test1_idempotent is not changed

- name: "Test 1.4: Update IP address (overwrite=true by default)"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "shorthand-test.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    ipAddress: "192.0.2.11"
    ttl: 3600
    state: present
  register: test1_update

- name: "Test 1.4: Assert update was applied"
  ansible.builtin.assert:
    that:
      - test1_update is changed

- name: "Test 1.5: Verify updated IP"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "shorthand-test.{{ primary_zone_name }}"
  register: test1_verify_update

- name: "Test 1.5: Assert IP was updated"
  ansible.builtin.assert:
    that:
      - test1_verify_update.records | length == 1
      - test1_verify_update.records[0].rData.ipAddress == '192.0.2.11'

- name: "Test 1.6: Delete record using shorthand"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "shorthand-test.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    state: absent
  register: test1_delete

- name: "Test 1.6: Assert deletion succeeded"
  ansible.builtin.assert:
    that:
      - test1_delete is changed

- name: "Test 1.7: Verify record was deleted"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "shorthand-test.{{ primary_zone_name }}"
  register: test1_verify_delete
  ignore_errors: true

- name: "Test 1.7: Assert record is gone"
  ansible.builtin.assert:
    that:
      - test1_verify_delete is failed

# =============================================================================
# Test 2: Records List - Multiple Records in a Set
# =============================================================================
- name: "Test 2.1: Create multiple A records using records parameter"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "multi-a.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    ttl: 7200
    records:
      - ipAddress: "192.0.2.20"
      - ipAddress: "192.0.2.21"
      - ipAddress: "192.0.2.22"
    state: present
  register: test2_create

- name: "Test 2.1: Assert records were created"
  ansible.builtin.assert:
    that:
      - test2_create is changed

- name: "Test 2.2: Verify all 3 records exist"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "multi-a.{{ primary_zone_name }}"
  register: test2_verify

- name: "Test 2.2: Assert 3 A records exist"
  ansible.builtin.assert:
    that:
      - test2_verify.records | length == 3
      - test2_verify.records | selectattr('type', 'equalto', 'A') | list | length == 3
      - "'192.0.2.20' in (test2_verify.records | map(attribute='rData') | map(attribute='ipAddress') | list)"
      - "'192.0.2.21' in (test2_verify.records | map(attribute='rData') | map(attribute='ipAddress') | list)"
      - "'192.0.2.22' in (test2_verify.records | map(attribute='rData') | map(attribute='ipAddress') | list)"

- name: "Test 2.3: Idempotency - Run same create again"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "multi-a.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    ttl: 7200
    records:
      - ipAddress: "192.0.2.20"
      - ipAddress: "192.0.2.21"
      - ipAddress: "192.0.2.22"
    state: present
  register: test2_idempotent

- name: "Test 2.3: Assert no changes"
  ansible.builtin.assert:
    that:
      - test2_idempotent is not changed

# =============================================================================
# Test 3: Overwrite Mode (default=true) - Replace entire record set
# =============================================================================
- name: "Test 3.1: Replace record set with overwrite=true (default)"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "multi-a.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    ttl: 7200
    records:
      - ipAddress: "192.0.2.30"
      - ipAddress: "192.0.2.31"
    state: present
  register: test3_replace

- name: "Test 3.1: Assert replacement occurred"
  ansible.builtin.assert:
    that:
      - test3_replace is changed

- name: "Test 3.2: Verify old records gone, new records present"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "multi-a.{{ primary_zone_name }}"
  register: test3_verify

- name: "Test 3.2: Assert only new records exist"
  ansible.builtin.assert:
    that:
      - test3_verify.records | length == 2
      - "'192.0.2.30' in (test3_verify.records | map(attribute='rData') | map(attribute='ipAddress') | list)"
      - "'192.0.2.31' in (test3_verify.records | map(attribute='rData') | map(attribute='ipAddress') | list)"
      - "'192.0.2.20' not in (test3_verify.records | map(attribute='rData') | map(attribute='ipAddress') | list)"
      - "'192.0.2.21' not in (test3_verify.records | map(attribute='rData') | map(attribute='ipAddress') | list)"
      - "'192.0.2.22' not in (test3_verify.records | map(attribute='rData') | map(attribute='ipAddress') | list)"

# =============================================================================
# Test 4: Additive Mode (overwrite=false) - Add to existing set
# =============================================================================
- name: "Test 4.1: Add records with overwrite=false"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "multi-a.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    ttl: 7200
    overwrite: false
    records:
      - ipAddress: "192.0.2.40"
      - ipAddress: "192.0.2.41"
    state: present
  register: test4_add

- name: "Test 4.1: Assert records were added"
  ansible.builtin.assert:
    that:
      - test4_add is changed

- name: "Test 4.2: Verify all records present (old + new)"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "multi-a.{{ primary_zone_name }}"
  register: test4_verify

- name: "Test 4.2: Assert 4 total records (2 old + 2 new)"
  ansible.builtin.assert:
    that:
      - test4_verify.records | length == 4
      - "'192.0.2.30' in (test4_verify.records | map(attribute='rData') | map(attribute='ipAddress') | list)"
      - "'192.0.2.31' in (test4_verify.records | map(attribute='rData') | map(attribute='ipAddress') | list)"
      - "'192.0.2.40' in (test4_verify.records | map(attribute='rData') | map(attribute='ipAddress') | list)"
      - "'192.0.2.41' in (test4_verify.records | map(attribute='rData') | map(attribute='ipAddress') | list)"

- name: "Test 4.3: Idempotency with overwrite=false"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "multi-a.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    ttl: 7200
    overwrite: false
    records:
      - ipAddress: "192.0.2.40"
      - ipAddress: "192.0.2.41"
    state: present
  register: test4_idempotent

- name: "Test 4.3: Assert no changes when records already exist"
  ansible.builtin.assert:
    that:
      - test4_idempotent is not changed

# =============================================================================
# Test 5: Selective Deletion - Delete specific records from set
# =============================================================================
- name: "Test 5.1: Delete specific records from set"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "multi-a.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    records:
      - ipAddress: "192.0.2.40"
      - ipAddress: "192.0.2.41"
    state: absent
  register: test5_delete_specific

- name: "Test 5.1: Assert specific records were deleted"
  ansible.builtin.assert:
    that:
      - test5_delete_specific is changed
      - test5_delete_specific.deleted_count == 2

- name: "Test 5.2: Verify only specified records deleted"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "multi-a.{{ primary_zone_name }}"
  register: test5_verify

- name: "Test 5.2: Assert only 2 records remain"
  ansible.builtin.assert:
    that:
      - test5_verify.records | length == 2
      - "'192.0.2.30' in (test5_verify.records | map(attribute='rData') | map(attribute='ipAddress') | list)"
      - "'192.0.2.31' in (test5_verify.records | map(attribute='rData') | map(attribute='ipAddress') | list)"
      - "'192.0.2.40' not in (test5_verify.records | map(attribute='rData') | map(attribute='ipAddress') | list)"
      - "'192.0.2.41' not in (test5_verify.records | map(attribute='rData') | map(attribute='ipAddress') | list)"

# =============================================================================
# Test 6: Delete Entire Record Set (no records specified)
# =============================================================================
- name: "Test 6.1: Delete entire record set"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "multi-a.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    state: absent
  register: test6_delete_all

- name: "Test 6.1: Assert entire set was deleted"
  ansible.builtin.assert:
    that:
      - test6_delete_all is changed
      - test6_delete_all.deleted_count == 2

- name: "Test 6.2: Verify no records remain"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "multi-a.{{ primary_zone_name }}"
  register: test6_verify
  ignore_errors: true

- name: "Test 6.2: Assert record set is gone"
  ansible.builtin.assert:
    that:
      - test6_verify is failed

- name: "Test 6.3: Idempotent delete of non-existent set"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "multi-a.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    state: absent
  register: test6_delete_idempotent

- name: "Test 6.3: Assert no changes"
  ansible.builtin.assert:
    that:
      - test6_delete_idempotent is not changed

# =============================================================================
# Test 7: Check Mode Tests
# =============================================================================
- name: "Test 7.1: Check mode - Create"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "check-mode-test.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    ipAddress: "192.0.2.50"
    state: present
  check_mode: true
  register: test7_check_create

- name: "Test 7.1: Assert check mode reports change"
  ansible.builtin.assert:
    that:
      - test7_check_create is changed

- name: "Test 7.2: Verify record was not created"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "check-mode-test.{{ primary_zone_name }}"
  register: test7_verify_not_created
  ignore_errors: true

- name: "Test 7.2: Assert record doesn't exist"
  ansible.builtin.assert:
    that:
      - test7_verify_not_created is failed

# =============================================================================
# Test 8: Validation - Conflicting Parameters
# =============================================================================
- name: "Test 8.1: Try to use both records and shorthand (should fail)"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "validation-test.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    ipAddress: "192.0.2.60"
    records:
      - ipAddress: "192.0.2.61"
    state: present
  register: test8_conflict
  ignore_errors: true

- name: "Test 8.1: Assert validation error"
  ansible.builtin.assert:
    that:
      - test8_conflict is failed
      - test8_conflict.msg is search("Cannot use both")

# =============================================================================
# Test 9: PTR Records with Shorthand
# =============================================================================
- name: "Test 9.1: Create A record with PTR using shorthand"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "ptr-test.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    ipAddress: "192.0.5.10"
    ptr: true
    createPtrZone: true
    state: present
  register: test9_ptr

- name: "Test 9.1: Assert PTR record created"
  ansible.builtin.assert:
    that:
      - test9_ptr is changed

- name: "Test 9.2: Cleanup PTR test"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "ptr-test.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    state: absent
  register: test9_cleanup

# =============================================================================
# Test 10: Negative Tests - Missing Required Parameters
# =============================================================================
- name: "Test 10.1: Missing ipAddress with shorthand (state=present)"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "missing-ip.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    ttl: 3600
    state: present
  register: test10_missing_ip
  ignore_errors: true

- name: "Test 10.1: Assert missing parameter error"
  ansible.builtin.assert:
    that:
      - test10_missing_ip is failed
      - test10_missing_ip.msg is search("No records specified|ipAddress")

- name: "Test 10.2: Missing required field in records list"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "missing-field.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    records:
      - ttl: 3600
    state: present
  register: test10_missing_field
  ignore_errors: true

- name: "Test 10.2: Assert missing field error"
  ansible.builtin.assert:
    that:
      - test10_missing_field is failed
      - test10_missing_field.msg is search("missing required field 'ipAddress'")

- name: "Test 10.3: Empty records list for state=present"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "empty-records.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    records: []
    state: present
  register: test10_empty_records
  ignore_errors: true

- name: "Test 10.3: Assert empty records error"
  ansible.builtin.assert:
    that:
      - test10_empty_records is failed
      - test10_empty_records.msg is search("No records specified")

# =============================================================================
# Test 11: Negative Tests - Unsupported Parameters
# =============================================================================
- name: "Test 11.1: Unsupported parameter for A record (cname)"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "bad-param.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    ipAddress: "192.0.2.70"
    cname: "other.example.com"
    state: present
  register: test11_bad_param
  ignore_errors: true

- name: "Test 11.1: Assert unsupported parameter error"
  ansible.builtin.assert:
    that:
      - test11_bad_param is failed
      - test11_bad_param.msg is search("not supported for record type")

- name: "Test 11.2: Unsupported parameter for A record (exchange)"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "bad-param2.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    ipAddress: "192.0.2.71"
    exchange: "mail.example.com"
    state: present
  register: test11_bad_param2
  ignore_errors: true

- name: "Test 11.2: Assert unsupported parameter error"
  ansible.builtin.assert:
    that:
      - test11_bad_param2 is failed
      - test11_bad_param2.msg is search("not supported for record type")

- name: "Test 11.3: Unsupported parameter for A record in list (exchange)"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "bad-param3.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    records:
      - ipAddress: "192.0.2.71"
      - ipAddress: "192.0.2.72"
        exchange: "mail.example.com"
    state: present
  register: test11_bad_param3
  ignore_errors: true

- name: "Test 11.3: Assert unsupported parameter error"
  ansible.builtin.assert:
    that:
      - test11_bad_param3 is failed
      - test11_bad_param3.msg is search("Record 1 contains unsupported field")

# =============================================================================
# Test 12: Negative Tests - Invalid API Authentication
# =============================================================================
- name: "Test 12.1: Invalid API token"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "INVALID_TOKEN_12345"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "bad-token.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    ipAddress: "192.0.2.80"
    state: present
  register: test12_bad_token
  ignore_errors: true

- name: "Test 12.1: Assert invalid token error"
  ansible.builtin.assert:
    that:
      - test12_bad_token is failed
      - test12_bad_token.msg is search("Invalid token|authentication|unauthorized")

- name: "Test 12.2: Empty API token"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: ""
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "empty-token.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    ipAddress: "192.0.2.81"
    state: present
  register: test12_empty_token
  ignore_errors: true

- name: "Test 12.2: Assert empty token error"
  ansible.builtin.assert:
    that:
      - test12_empty_token is failed

# =============================================================================
# Test 13: Negative Tests - Invalid Record Data
# =============================================================================
- name: "Test 13.1: Invalid IP address format"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "invalid-ip.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    ipAddress: "999.999.999.999"
    state: present
  register: test13_invalid_ip
  ignore_errors: true

- name: "Test 13.1: Assert invalid IP error"
  ansible.builtin.assert:
    that:
      - test13_invalid_ip is failed

- name: "Test 13.2: IPv6 address in A record"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "ipv6-in-a.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    ipAddress: "2001:db8::1"
    state: present
  register: test13_ipv6_in_a
  ignore_errors: true

- name: "Test 13.2: Assert IPv6 in A record error"
  ansible.builtin.assert:
    that:
      - test13_ipv6_in_a is failed

- name: "Test 13.3: Invalid TTL (negative)"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "invalid-ttl.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    ipAddress: "192.0.2.90"
    ttl: -1
    state: present
  register: test13_invalid_ttl
  ignore_errors: true

- name: "Test 13.3: Assert invalid TTL error"
  ansible.builtin.assert:
    that:
      - test13_invalid_ttl is failed

# =============================================================================
# Test 14: Negative Tests - Non-existent Zone
# =============================================================================
- name: "Test 14.1: Create record in non-existent zone"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "test.nonexistent.zone"
    zone: "nonexistent.zone"
    type: A
    ipAddress: "192.0.2.100"
    state: present
  register: test14_bad_zone
  ignore_errors: true

- name: "Test 14.1: Assert non-existent zone error"
  ansible.builtin.assert:
    that:
      - test14_bad_zone is failed
      - test14_bad_zone.msg is search("zone|not found|does not exist")

# =============================================================================
# Test 15: Negative Tests - Delete Non-existent Records
# =============================================================================
- name: "Test 15.1: Delete specific record that doesn't exist"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "never-existed.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    records:
      - ipAddress: "192.0.2.200"
    state: absent
  register: test15_delete_nonexistent
  ignore_errors: true

- name: "Test 15.1: Assert no changes (idempotent delete)"
  ansible.builtin.assert:
    that:
      - test15_delete_nonexistent is not changed

- name: "Test 15.2: Delete with missing identifying fields"
  effectivelywild.technitium_dns.technitium_dns_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "missing-id.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    records:
      - ttl: 3600
    state: absent
  register: test15_missing_id
  ignore_errors: true

- name: "Test 15.2: Assert missing identifying field error"
  ansible.builtin.assert:
    that:
      - test15_missing_id is failed
      - test15_missing_id.msg is search("missing required field|missing identifying fields")

- name: "Test Completion Message"
  ansible.builtin.debug:
    msg: "v1.0.0 A Record tests completed successfully! (Including negative tests)"
