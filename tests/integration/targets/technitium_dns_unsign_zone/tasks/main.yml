# Phase 1: Load configuration and setup test zones
- name: "Load test configuration"
  include_vars: ../vars/config.yml

- name: "Load zone test data"  
  include_vars: ../vars/zone_test_data.yml

- name: "Delete DNS zones (cleanup)"
  technitium_dns_delete_zone:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: "{{ zone_item.zone }}"
  register: zone_deletion_result
  loop: "{{ unsign_test_zones }}"
  loop_control:
    loop_var: zone_item
    label: "{{ zone_item.zone }}"

# Phase 2: Create DNS zones for testing
- name: "Create DNS zones for testing"
  technitium_dns_create_zone:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: "{{ zone_item.zone }}"
    type: Primary
  register: zone_creation_results
  loop: "{{ unsign_test_zones }}"
  loop_control:
    loop_var: zone_item
    label: "{{ zone_item.zone }}"

# Phase 3: Sign zones (prerequisite for unsigning)
- name: "Sign DNS zones for testing"
  technitium_dns_sign_zone:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: "{{ zone_item.zone }}"
    algorithm: "{{ sign_parameters.algorithm }}"
    hashAlgorithm: "{{ sign_parameters.hashAlgorithm }}"
    kskKeySize: "{{ sign_parameters.kskKeySize }}"
    zskKeySize: "{{ sign_parameters.zskKeySize }}"
    nxProof: "{{ sign_parameters.nxProof }}"
  register: zone_signing_results
  loop: "{{ unsign_test_zones }}"
  loop_control:
    loop_var: zone_item
    label: "{{ zone_item.zone }}"

- name: "Verify zones are signed before unsigning"
  technitium_dns_get_zone_options:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: "{{ zone_item.zone }}"
  register: pre_unsign_zone_status
  loop: "{{ unsign_test_zones }}"
  loop_control:
    loop_var: zone_item
    label: "{{ zone_item.zone }}"

- name: Debug pre_unsign_zone_status
  ansible.builtin.debug:
    var: pre_unsign_zone_status
  when: debug | default(false)

- name: "Assert zones are signed before testing"
  ansible.builtin.assert:
    that:
      - item.options.dnssecStatus != "Unsigned"
    quiet: true
    fail_msg: "Zone {{ item.zone_item.zone }} should be signed before unsigning test"
  loop: "{{ pre_unsign_zone_status.results }}"
  loop_control:
    label: "{{ item.zone_item.zone }}"

# Phase 4: Test unsigning zones
- name: "Check mode - Unsign DNS zones"
  technitium_dns_unsign_zone:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: "{{ zone_item.zone }}"
  check_mode: true
  register: zone_unsigning_check_results
  loop: "{{ unsign_test_zones }}"
  loop_control:
    loop_var: zone_item
    label: "{{ zone_item.zone }}"

- name: "Assert DNS zones would be unsigned (check mode)"
  ansible.builtin.assert:
    that:
      - item is changed
    quiet: true
    fail_msg: "Zone {{ item.zone_item.zone }} should be marked as changed in check mode"
  loop: "{{ zone_unsigning_check_results.results }}"
  loop_control:
    label: "{{ item.zone_item.zone }}"

- name: "Unsign DNS zones"
  technitium_dns_unsign_zone:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: "{{ zone_item.zone }}"
  register: zone_unsigning_results
  loop: "{{ unsign_test_zones }}"
  loop_control:
    loop_var: zone_item
    label: "{{ zone_item.zone }}"

- name: "Assert DNS zones are unsigned"
  ansible.builtin.assert:
    that:
      - item is changed
    quiet: true
    fail_msg: "Zone {{ item.zone_item.zone }} should be marked as changed after unsigning"
  loop: "{{ zone_unsigning_results.results }}"
  loop_control:
    label: "{{ item.zone_item.zone }}"

# Phase 5: Verify zones are unsigned
- name: "Get zone options to verify zones are unsigned"
  technitium_dns_get_zone_options:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: "{{ zone_item.zone }}"
  register: post_unsign_zone_status
  loop: "{{ unsign_test_zones }}"
  loop_control:
    loop_var: zone_item
    label: "{{ zone_item.zone }}"

- name: Debug unsign_test_zones
  ansible.builtin.debug:
    var: unsign_test_zones
  when: debug | default(false)

- name: "Assert zones are now unsigned"
  ansible.builtin.assert:
    that:
      - item.options.dnssecStatus == "Unsigned"
    quiet: true
    fail_msg: "Zone {{ item.zone_item.zone }} should be unsigned after unsigning"
    success_msg: "Zone {{ item.zone_item.zone }} is correctly unsigned"
  loop: "{{ post_unsign_zone_status.results }}"
  loop_control:
    label: "{{ item.zone_item.zone }}"

# Phase 6: Idempotency tests
- name: "Idempotency - Check mode - Unsign already unsigned zones"
  technitium_dns_unsign_zone:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: "{{ zone_item.zone }}"
  check_mode: true
  register: zone_unsigning_idempotency_check_results
  loop: "{{ unsign_test_zones }}"
  loop_control:
    loop_var: zone_item
    label: "{{ zone_item.zone }}"

- name: "Assert DNS zones are idempotent in check mode"
  ansible.builtin.assert:
    that:
      - not (item is changed)
    quiet: true
    fail_msg: "Already unsigned zone {{ item.zone_item.zone }} should not be changed in check mode"
  loop: "{{ zone_unsigning_idempotency_check_results.results }}"
  loop_control:
    label: "{{ item.zone_item.zone }}"

- name: "Idempotency - Unsign already unsigned zones"
  technitium_dns_unsign_zone:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: "{{ zone_item.zone }}"
  register: zone_unsigning_idempotency_results
  loop: "{{ unsign_test_zones }}"
  loop_control:
    loop_var: zone_item
    label: "{{ zone_item.zone }}"

- name: "Assert DNS zones are idempotent"
  ansible.builtin.assert:
    that:
      - not (item is changed)
    quiet: true
    fail_msg: "Already unsigned zone {{ item.zone_item.zone }} should not be changed"
  loop: "{{ zone_unsigning_idempotency_results.results }}"
  loop_control:
    label: "{{ item.zone_item.zone }}"

# Phase 7: Failure tests
- name: "Failure Tests - Unsign DNS zone with invalid API Token"
  technitium_dns_unsign_zone:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "BADTOKEN"
    api_port: "{{ technitium_api_port_2 | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: "{{ unsign_test_zones[0].zone }}"
  register: fail_bad_token
  ignore_errors: true

- name: "Assert failure of invalid API token"
  ansible.builtin.assert:
    that:
      - fail_bad_token.failed
      - "'Invalid token' in (fail_bad_token.msg)"
    quiet: true

- name: "Failure Test - Unsign non-existent zone"
  technitium_dns_unsign_zone:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) | int }}"
    validate_certs: "{{ validate_certs | default(true) }}"
    zone: "nonexistent999.{{ testing_suffix }}"
  ignore_errors: true
  register: nonexistent_zone_unsigning_result

- name: "Assert DNS zone unsigning fails for non-existent zone"
  ansible.builtin.assert:
    that:
      - nonexistent_zone_unsigning_result is failed
      - "'No such zone was found' in (nonexistent_zone_unsigning_result.msg)"
    quiet: true
