---
# Integration test for technitium_dns_delete_record (SSHFP records)
# Structure and variables match test_add_sshfp_records.yml

- name: "Define SSHFP test records to delete"
  ansible.builtin.set_fact:
    delete_sshfp_test_records:
      - { idx: 1, name: sshfp-rsa,      zone: "{{ primary_sec_zone_name }}", sshfpAlgorithm: RSA,      sshfpFingerprintType: SHA256, sshfpFingerprint: a1b2c3d4e5f60718293a4b5c6d7e8f90123456789abcdef0fedcba9876543210, ttl: 3600 }
      - { idx: 2, name: sshfp-dsa,      zone: "{{ primary_sec_zone_name }}", sshfpAlgorithm: DSA,      sshfpFingerprintType: SHA256, sshfpFingerprint: b1c2d3e4f5061728394a5b6c7d8e9f00112233445566778899aabbccddeeff00 }
      - { idx: 3, name: sshfp-ecdsa,    zone: "{{ primary_sec_zone_name }}", sshfpAlgorithm: ECDSA,    sshfpFingerprintType: SHA256, sshfpFingerprint: c1d2e3f40516273849a5b6c7d8e9f00112233445566778899aabbccddeeff112, comments: "ECDSA fingerprint" }
      - { idx: 4, name: sshfp-ed25519,  zone: "{{ primary_sec_zone_name }}", sshfpAlgorithm: Ed25519,  sshfpFingerprintType: SHA256, sshfpFingerprint: d1e2f30415263748a9b5c6d7e8f00112233445566778899aabbccddeeff11223, ttl: 600, comments: "Ed25519 short ttl" }
      - { idx: 5, name: sshfp-ed448,    zone: "{{ primary_sec_zone_name }}", sshfpAlgorithm: Ed448,    sshfpFingerprintType: SHA256, sshfpFingerprint: e1f2031425364748a9b5c6d7e8f00112233445566778899aabbccddeeff11223 }

# Phase 1: Create the records (using add module)
- name: "Create SSHFP records to be deleted"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: SSHFP
    sshfpAlgorithm: "{{ rec.sshfpAlgorithm }}"
    sshfpFingerprintType: "{{ rec.sshfpFingerprintType }}"
    sshfpFingerprint: "{{ rec.sshfpFingerprint }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
  loop: "{{ delete_sshfp_test_records }}"
  loop_control:
    loop_var: rec
    label: "Create: {{ rec.idx }}-{{ rec.name }}.{{ rec.zone }}"
  register: create_sshfp_results

- name: "Assert SSHFP records created"
  ansible.builtin.assert:
    that:
      - (create_sshfp_results.results | map(attribute='changed') | list | unique) == [ true ]

# Phase 2: Check mode - plan deletion
- name: "Plan delete SSHFP records (check mode)"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: SSHFP
    sshfpAlgorithm: "{{ rec.sshfpAlgorithm }}"
    sshfpFingerprintType: "{{ rec.sshfpFingerprintType }}"
    sshfpFingerprint: "{{ rec.sshfpFingerprint }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
  check_mode: true
  loop: "{{ delete_sshfp_test_records }}"
  loop_control:
    loop_var: rec
    label: "PlanDelete: {{ rec.name }}.{{ rec.zone }}"
  register: plan_delete_sshfp_results

- name: "Assert all delete plans report changed"
  ansible.builtin.assert:
    that:
      - (plan_delete_sshfp_results.results | map(attribute='changed') | list | unique) == [ true ]

# Phase 3: Delete the records
- name: "Delete SSHFP records"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: SSHFP
    sshfpAlgorithm: "{{ rec.sshfpAlgorithm }}"
    sshfpFingerprintType: "{{ rec.sshfpFingerprintType }}"
    sshfpFingerprint: "{{ rec.sshfpFingerprint }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
  loop: "{{ delete_sshfp_test_records }}"
  loop_control:
    loop_var: rec
    label: "Delete: {{ rec.idx }}-{{ rec.name }}.{{ rec.zone }}"
  register: delete_sshfp_results

- name: "Assert SSHFP records deleted"
  ansible.builtin.assert:
    that:
      - (delete_sshfp_results.results | map(attribute='changed') | list | unique) == [ true ]

# Phase 4: Check mode - plan deletion again (should be no changes)
- name: "Plan delete SSHFP records again (check mode, after deletion)"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: SSHFP
    sshfpAlgorithm: "{{ rec.sshfpAlgorithm }}"
    sshfpFingerprintType: "{{ rec.sshfpFingerprintType }}"
    sshfpFingerprint: "{{ rec.sshfpFingerprint }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
  check_mode: true
  loop: "{{ delete_sshfp_test_records }}"
  loop_control:
    loop_var: rec
    label: "PlanDeleteAgain: {{ rec.name }}.{{ rec.zone }}"
  register: plan_delete_sshfp_again_results

- name: "Assert all delete plans after deletion report no changes"
  ansible.builtin.assert:
    that:
      - (plan_delete_sshfp_again_results.results | map(attribute='changed') | list | unique) == [ false ]

# Phase 5: Verify record doesn't exist with get_record
- name: "Fetch records for absence (get_records)"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ rec.zone }}"
  loop: "{{ delete_sshfp_test_records }}"
  loop_control:
    loop_var: rec
    label: "Get(absent): {{ rec.name }}.{{ rec.zone }}"
  register: absent_get_results

- name: Debug absent_get_results
  ansible.builtin.debug:
    var: absent_get_results
  when: debug | default(false)

- name: "Assert absence (no pre-existing SSHFP record by name)"
  ansible.builtin.assert:
    that:
      - >-
        (item.records | default([])
         | selectattr('type','equalto','SSHFP')
         | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
         | list | length) == 0
    quiet: true
  loop: "{{ absent_get_results.results }}"
  loop_control:
    label: "AbsentAssert: {{ item.rec.name }}.{{ item.rec.zone }}"

# Phase 6: Idempotency - rerun delete (should be no changes)
- name: "Idempotency: Re-run delete SSHFP records"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: SSHFP
    sshfpAlgorithm: "{{ rec.sshfpAlgorithm }}"
    sshfpFingerprintType: "{{ rec.sshfpFingerprintType }}"
    sshfpFingerprint: "{{ rec.sshfpFingerprint }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
  loop: "{{ delete_sshfp_test_records }}"
  loop_control:
    loop_var: rec
    label: "IdempotentDelete: {{ rec.name }}.{{ rec.zone }}"
  register: idempotent_delete_sshfp_results

- name: "Assert idempotent delete reports no changes"
  ansible.builtin.assert:
    that:
      - (idempotent_delete_sshfp_results.results | map(attribute='changed') | list | unique) == [ false ]

# Phase 7: Negative tests
- name: "Negative: missing required sshfpAlgorithm param"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "neg-missing-algo-sshfp.{{ primary_sec_zone_name }}"
    zone: "{{ primary_sec_zone_name }}"
    type: SSHFP
    sshfpFingerprintType: SHA256
    sshfpFingerprint: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
  register: neg_delete_sshfp_missing_algo
  ignore_errors: true

- name: "Assert failure of missing sshfpAlgorithm param"
  ansible.builtin.assert:
    that:
      - neg_delete_sshfp_missing_algo.failed
      - "'sshfpAlgorithm' in (neg_delete_sshfp_missing_algo.msg | default(''))"

- name: "Negative: unsupported param for SSHFP (ipAddress)"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "bad-param-sshfp.{{ primary_sec_zone_name }}"
    zone: "{{ primary_sec_zone_name }}"
    type: SSHFP
    sshfpAlgorithm: RSA
    sshfpFingerprintType: SHA256
    sshfpFingerprint: f123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdea
    ipAddress: 192.0.2.250
  register: neg_delete_sshfp_bad_param
  ignore_errors: true

- name: "Assert failure of unsupported param"
  ansible.builtin.assert:
    that:
      - neg_delete_sshfp_bad_param.failed
      - "'ipAddress' in (neg_delete_sshfp_bad_param.msg | default(''))"

- name: "Negative: invalid API token"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: BADTOKEN
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "bad-token-sshfp.{{ primary_sec_zone_name }}"
    zone: "{{ primary_sec_zone_name }}"
    type: SSHFP
    sshfpAlgorithm: RSA
    sshfpFingerprintType: SHA256
    sshfpFingerprint: 0f23456789abcdef0123456789abcdef0123456789abcdef0123456789abcded
  register: neg_delete_sshfp_bad_token
  ignore_errors: true

- name: "Assert failure of invalid API token"
  ansible.builtin.assert:
    that:
      - neg_delete_sshfp_bad_token.failed
      - "'Invalid token' in (neg_delete_sshfp_bad_token.msg)"
