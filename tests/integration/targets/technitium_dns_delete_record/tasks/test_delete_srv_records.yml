---
# Integration test for technitium_dns_delete_record (SRV records)
# Structure and variables match test_add_srv_records.yml

- name: "Define SRV test records to delete"
  ansible.builtin.set_fact:
    delete_srv_test_records:
      - { idx: 1, name: srv-basic, zone: "{{ primary_zone_name }}", priority: 10, weight: 5, srv_port: 5060, target: sip1.example }
      - { idx: 2, name: srv-ttl, zone: "{{ primary_zone_name }}", priority: 20, weight: 0, srv_port: 5061, target: sip2.example, ttl: 7200 }
      - { idx: 3, name: srv-comment-sec, zone: "{{ primary_sec_zone_name }}", priority: 5, weight: 10, srv_port: 5070, target: sip3.example, ttl: 3600, comments: "Secure zone SRV with comment" }

# Phase 1: Create the records (using add module)
- name: "Create SRV records to be deleted"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "_sip._tcp.{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: SRV
    priority: "{{ rec.priority }}"
    weight: "{{ rec.weight }}"
    srv_port: "{{ rec.srv_port }}"
    target: "{{ rec.target }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
  loop: "{{ delete_srv_test_records }}"
  loop_control:
    loop_var: rec
    label: "Create: {{ rec.idx }}-{{ rec.name }}.{{ rec.zone }}"
  register: create_srv_results

- name: "Assert SRV records created"
  ansible.builtin.assert:
    that:
      - (create_srv_results.results | map(attribute='changed') | list | unique) == [ true ]

# Phase 2: Check mode - plan deletion
- name: "Plan delete SRV records (check mode)"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "_sip._tcp.{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: SRV
    priority: "{{ rec.priority }}"
    weight: "{{ rec.weight }}"
    srv_port: "{{ rec.srv_port }}"
    target: "{{ rec.target }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
  check_mode: true
  loop: "{{ delete_srv_test_records }}"
  loop_control:
    loop_var: rec
    label: "PlanDelete: {{ rec.name }}.{{ rec.zone }}"
  register: plan_delete_srv_results

- name: "Assert all delete plans report changed"
  ansible.builtin.assert:
    that:
      - (plan_delete_srv_results.results | map(attribute='changed') | list | unique) == [ true ]

# Phase 3: Delete the records
- name: "Delete SRV records"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "_sip._tcp.{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: SRV
    priority: "{{ rec.priority }}"
    weight: "{{ rec.weight }}"
    srv_port: "{{ rec.srv_port }}"
    target: "{{ rec.target }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
  loop: "{{ delete_srv_test_records }}"
  loop_control:
    loop_var: rec
    label: "Delete: {{ rec.idx }}-{{ rec.name }}.{{ rec.zone }}"
  register: delete_srv_results

- name: "Assert SRV records deleted"
  ansible.builtin.assert:
    that:
      - (delete_srv_results.results | map(attribute='changed') | list | unique) == [ true ]

# Phase 4: Check mode - plan deletion again (should be no changes)
- name: "Plan delete SRV records again (check mode, after deletion)"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "_sip._tcp.{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: SRV
    priority: "{{ rec.priority }}"
    weight: "{{ rec.weight }}"
    srv_port: "{{ rec.srv_port }}"
    target: "{{ rec.target }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
  check_mode: true
  loop: "{{ delete_srv_test_records }}"
  loop_control:
    loop_var: rec
    label: "PlanDeleteAgain: {{ rec.name }}.{{ rec.zone }}"
  register: plan_delete_srv_again_results

- name: "Assert all delete plans after deletion report no changes"
  ansible.builtin.assert:
    that:
      - (plan_delete_srv_again_results.results | map(attribute='changed') | list | unique) == [ false ]

# Phase 5: Verify record doesn't exist with get_record
- name: "Fetch records for absence (get_records)"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "{{ rec.zone }}"
  loop: "{{ delete_srv_test_records }}"
  loop_control:
    loop_var: rec
    label: "Get(absent): {{ rec.name }}.{{ rec.zone }}"
  register: absent_get_results

- name: Debug absent_get_results
  ansible.builtin.debug:
    var: absent_get_results
  when: debug | default(false)

- name: "Assert absence (no pre-existing SRV record by name)"
  ansible.builtin.assert:
    that:
      - >-
        (item.records | default([])
         | selectattr('type','equalto','SRV')
         | selectattr('name','equalto', ('_sip._tcp.' ~ item.rec.name ~ '.' ~ item.rec.zone))
         | list | length) == 0
    quiet: true
  loop: "{{ absent_get_results.results }}"
  loop_control:
    label: "AbsentAssert: {{ item.rec.name }}.{{ item.rec.zone }}"

# Phase 6: Idempotency - rerun delete (should be no changes)
- name: "Idempotency: Re-run delete SRV records"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "_sip._tcp.{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: SRV
    priority: "{{ rec.priority }}"
    weight: "{{ rec.weight }}"
    srv_port: "{{ rec.srv_port }}"
    target: "{{ rec.target }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    comments: "{{ rec.comments | default(omit) }}"
  loop: "{{ delete_srv_test_records }}"
  loop_control:
    loop_var: rec
    label: "IdempotentDelete: {{ rec.name }}.{{ rec.zone }}"
  register: idempotent_delete_srv_results

- name: "Assert idempotent delete reports no changes"
  ansible.builtin.assert:
    that:
      - (idempotent_delete_srv_results.results | map(attribute='changed') | list | unique) == [ false ]

# Phase 7: Negative tests
- name: "Negative: missing required priority param"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "_sip._tcp.neg-missing-priority.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: SRV
    weight: 10
    srv_port: 5090
    target: bad.example.
  register: neg_delete_srv_missing_priority
  ignore_errors: true

- name: "Assert failure of missing priority param"
  ansible.builtin.assert:
    that:
      - neg_delete_srv_missing_priority.failed
      - "'priority' in (neg_delete_srv_missing_priority.msg | default(''))"

- name: "Negative: unsupported param for SRV (ipAddress)"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: "{{ technitium_api_token }}"
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "_sip._tcp.bad-param-srv.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: SRV
    priority: 1
    weight: 1
    srv_port: 5091
    target: badparam.example.
    ipAddress: 192.0.2.250
  register: neg_delete_srv_bad_param
  ignore_errors: true

- name: "Assert failure of unsupported param"
  ansible.builtin.assert:
    that:
      - neg_delete_srv_bad_param.failed
      - "'ipAddress' in (neg_delete_srv_bad_param.msg | default(''))"

- name: "Negative: invalid API token"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url | default('http://localhost') }}"
    api_token: BADTOKEN
    api_port: "{{ technitium_api_port | default(5380) }}"
    name: "_sip._tcp.bad-token-srv.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: SRV
    priority: 1
    weight: 0
    srv_port: 5092
    target: badtoken.example.
  register: neg_delete_srv_bad_token
  ignore_errors: true

- name: "Assert failure of invalid API token"
  ansible.builtin.assert:
    that:
      - neg_delete_srv_bad_token.failed
      - "'Invalid token' in (neg_delete_srv_bad_token.msg)"
