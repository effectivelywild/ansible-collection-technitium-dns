---
# Integration test for technitium_dns_delete_record (A records)
# Structure and variables match test_add_a_records.yml

- name: "Define A test records to delete"
  ansible.builtin.set_fact:
    delete_a_test_records:
      - { idx: 1, name: basic-a,        ipAddress: 192.0.2.10, zone: "{{ primary_zone_name }}" }
      - { idx: 2, name: longttl-a,      ipAddress: 192.0.3.10, zone: "{{ primary_zone_name }}", ttl: 86400 }
      - { idx: 3, name: longttl-a-sec,  ipAddress: 192.0.4.10, zone: "{{ primary_sec_zone_name }}", ttl: 86400 }
      - { idx: 4, name: basic-a-fwd,    ipAddress: 192.0.5.10, zone: "{{ forwarder_zone_name }}" }
      - { idx: 5, name: ptr-a,          ipAddress: 192.0.6.10, zone: "{{ primary_zone_name }}", ptr: true, createPtrZone: true }
    failure_a_test_records:
      - { idx: 1, name: fail-basic-a,   ipAddress: 192.0.7.10, zone: "{{ primary_zone_name }}" }

# Phase 1: Create all test records
- name: "Create A records to be deleted"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: A
    ipAddress: "{{ rec.ipAddress }}"
    ttl: "{{ rec.ttl | default(omit) }}"
    ptr: "{{ rec.ptr | default(omit) }}"
    createPtrZone: "{{ rec.createPtrZone | default(omit) }}"
  loop: "{{ delete_a_test_records + failure_a_test_records }}"
  loop_control:
    loop_var: rec
    label: "Create: {{ rec.idx }}-{{ rec.name }}.{{ rec.zone }}"
  register: create_a_results

- name: "Assert A records created"
  ansible.builtin.assert:
    that:
      - (create_a_results.results | map(attribute='changed') | list | unique) == [ true ]

# Phase 2: Check mode - plan deletion
- name: "Plan delete A records (check mode)"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: A
    ipAddress: "{{ rec.ipAddress }}"
  check_mode: true
  loop: "{{ delete_a_test_records }}"
  loop_control:
    loop_var: rec
    label: "PlanDelete: {{ rec.name }}.{{ rec.zone }}"
  register: plan_delete_a_results

- name: "Assert all delete plans report changed"
  ansible.builtin.assert:
    that:
      - (plan_delete_a_results.results | map(attribute='changed') | list | unique) == [ true ]

# Phase 3: Delete the records
- name: "Delete A records"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: A
    ipAddress: "{{ rec.ipAddress }}"
  loop: "{{ delete_a_test_records }}"
  loop_control:
    loop_var: rec
    label: "Delete: {{ rec.idx }}-{{ rec.name }}.{{ rec.zone }}"
  register: delete_a_results

- name: "Assert A records deleted"
  ansible.builtin.assert:
    that:
      - (delete_a_results.results | map(attribute='changed') | list | unique) == [ true ]

# Phase 4: Check mode - plan deletion again (should be no changes)
- name: "Plan delete A records again (check mode, after deletion)"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: A
    ipAddress: "{{ rec.ipAddress }}"
  check_mode: true
  loop: "{{ delete_a_test_records }}"
  loop_control:
    loop_var: rec
    label: "PlanDeleteAgain: {{ rec.name }}.{{ rec.zone }}"
  register: plan_delete_a_again_results

- name: "Assert all delete plans after deletion report no changes"
  ansible.builtin.assert:
    that:
      - (plan_delete_a_again_results.results | map(attribute='changed') | list | unique) == [ false ]

# Phase 5: Verify record doesn't exist with get_record
- name: "Fetch records for absence (get_records)"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ rec.zone }}"
  loop: "{{ delete_a_test_records }}"
  loop_control:
    loop_var: rec
    label: "Get(absent): {{ rec.name }}.{{ rec.zone }}"
  register: absent_get_results

- name: Debug absent_get_results
  ansible.builtin.debug:
    var: absent_get_results
  when: debug | default(false)

- name: "Assert absence (no pre-existing A record by name)"
  ansible.builtin.assert:
    that:
      - >-
        (item.records | default([])
         | selectattr('type','equalto','A')
         | selectattr('name','equalto', (item.rec.name ~ '.' ~ item.rec.zone))
         | list | length) == 0
    quiet: true
  loop: "{{ absent_get_results.results }}"
  loop_control:
    label: "AbsentAssert: {{ item.rec.name }}.{{ item.rec.zone }}"

# Phase 6: Idempotency - rerun delete (should be no changes)
- name: "Idempotency: Re-run delete A records"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: A
    ipAddress: "{{ rec.ipAddress }}"
  loop: "{{ delete_a_test_records }}"
  loop_control:
    loop_var: rec
    label: "IdempotentDelete: {{ rec.name }}.{{ rec.zone }}"
  register: idempotent_delete_a_results

- name: "Assert idempotent delete reports no changes"
  ansible.builtin.assert:
    that:
      - (idempotent_delete_a_results.results | map(attribute='changed') | list | unique) == [ false ]

# Phase 7: Negative tests
- name: "Negative: missing required ipAddress"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "neg-missing-ip.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
  register: neg_delete_a_missing_ip
  ignore_errors: true

- name: "Assert failure of missing ipAddress"
  ansible.builtin.assert:
    that:
      - neg_delete_a_missing_ip.failed
      - "'ipAddress' in (neg_delete_a_missing_ip.msg | default(''))"

- name: "Negative: unsupported param for A (cname)"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "bad-param.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    cname: other.example.
  register: neg_delete_a_bad_param
  ignore_errors: true

- name: "Assert failure of unsupported param"
  ansible.builtin.assert:
    that:
      - neg_delete_a_bad_param.failed
      - "'cname' in (neg_delete_a_bad_param.msg | default(''))"

- name: "Negative: invalid API token"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: BADTOKEN
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "bad-token.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    ipAddress: 198.51.100.200
  register: neg_delete_a_bad_token
  ignore_errors: true

- name: "Assert failure of invalid API token"
  ansible.builtin.assert:
    that:
      - neg_delete_a_bad_token.failed
      - "'Invalid token' in (neg_delete_a_bad_token.msg)"

- name: "Negative: delete record with incorrect (valid) parameter value"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "fail-basic-a.{{ primary_zone_name }}"
    zone: "{{ primary_zone_name }}"
    type: A
    ipAddress: 99.99.99.99
  register: neg_delete_a_record_bad_param_value
  ignore_errors: true

- name: "Assert failure of invalid API token"
  ansible.builtin.assert:
    that:
      - neg_delete_a_record_bad_param_value.failed
      - "'different parameter values' in (neg_delete_a_record_bad_param_value.msg)"