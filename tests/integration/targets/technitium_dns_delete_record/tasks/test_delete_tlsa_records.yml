---
# Integration test for technitium_dns_delete_record (TLSA records)
# Structure and variables match test_add_tlsa_records.yml

- name: "Set TLSA certificate association data samples"
  ansible.builtin.set_fact:
    tlsa_data_sha256: "abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890"
    tlsa_data_sha512: "abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890"
    tlsa_data_full: "abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890"

- name: "Define TLSA test records to delete"
  ansible.builtin.set_fact:
    delete_tlsa_test_records:
      # PKIX-TA combinations (6)
      - { idx: 1,  name: tlsa-1,  zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: PKIX-TA, tlsaSelector: Cert, tlsaMatchingType: Full }
      - { idx: 2,  name: tlsa-2,  zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: PKIX-TA, tlsaSelector: Cert, tlsaMatchingType: SHA2-256 }
      - { idx: 3,  name: tlsa-3,  zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: PKIX-TA, tlsaSelector: Cert, tlsaMatchingType: SHA2-512 }
      - { idx: 4,  name: tlsa-4,  zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: PKIX-TA, tlsaSelector: SPKI, tlsaMatchingType: Full }
      - { idx: 5,  name: tlsa-5,  zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: PKIX-TA, tlsaSelector: SPKI, tlsaMatchingType: SHA2-256 }
      - { idx: 6,  name: tlsa-6,  zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: PKIX-TA, tlsaSelector: SPKI, tlsaMatchingType: SHA2-512 }
      # PKIX-EE combinations (6)
      - { idx: 7,  name: tlsa-7,  zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: PKIX-EE, tlsaSelector: Cert, tlsaMatchingType: Full }
      - { idx: 8,  name: tlsa-8,  zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: PKIX-EE, tlsaSelector: Cert, tlsaMatchingType: SHA2-256 }
      - { idx: 9,  name: tlsa-9,  zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: PKIX-EE, tlsaSelector: Cert, tlsaMatchingType: SHA2-512 }
      - { idx: 10, name: tlsa-10, zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: PKIX-EE, tlsaSelector: SPKI, tlsaMatchingType: Full }
      - { idx: 11, name: tlsa-11, zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: PKIX-EE, tlsaSelector: SPKI, tlsaMatchingType: SHA2-256 }
      - { idx: 12, name: tlsa-12, zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: PKIX-EE, tlsaSelector: SPKI, tlsaMatchingType: SHA2-512 }
      # DANE-TA combinations (6)
      - { idx: 13, name: tlsa-13, zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: DANE-TA, tlsaSelector: Cert, tlsaMatchingType: Full }
      - { idx: 14, name: tlsa-14, zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: DANE-TA, tlsaSelector: Cert, tlsaMatchingType: SHA2-256 }
      - { idx: 15, name: tlsa-15, zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: DANE-TA, tlsaSelector: Cert, tlsaMatchingType: SHA2-512 }
      - { idx: 16, name: tlsa-16, zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: DANE-TA, tlsaSelector: SPKI, tlsaMatchingType: Full }
      - { idx: 17, name: tlsa-17, zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: DANE-TA, tlsaSelector: SPKI, tlsaMatchingType: SHA2-256 }
      - { idx: 18, name: tlsa-18, zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: DANE-TA, tlsaSelector: SPKI, tlsaMatchingType: SHA2-512 }
      # DANE-EE combinations (6)
      - { idx: 19, name: tlsa-19, zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: DANE-EE, tlsaSelector: Cert, tlsaMatchingType: Full }
      - { idx: 20, name: tlsa-20, zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: DANE-EE, tlsaSelector: Cert, tlsaMatchingType: SHA2-256 }
      - { idx: 21, name: tlsa-21, zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: DANE-EE, tlsaSelector: Cert, tlsaMatchingType: SHA2-512 }
      - { idx: 22, name: tlsa-22, zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: DANE-EE, tlsaSelector: SPKI, tlsaMatchingType: Full }
      - { idx: 23, name: tlsa-23, zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: DANE-EE, tlsaSelector: SPKI, tlsaMatchingType: SHA2-256 }
      - { idx: 24, name: tlsa-24, zone: "{{ primary_sec_zone_name }}", tlsaCertificateUsage: DANE-EE, tlsaSelector: SPKI, tlsaMatchingType: SHA2-512 }

# Phase 1: Create the records (using add module)
- name: "Create TLSA records to be deleted"
  technitium_dns_add_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "_443._tcp.{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: TLSA
    tlsaCertificateUsage: "{{ rec.tlsaCertificateUsage }}"
    tlsaSelector: "{{ rec.tlsaSelector }}"
    tlsaMatchingType: "{{ rec.tlsaMatchingType }}"
    tlsaCertificateAssociationData: >-
      {{
        ( rec.tlsaMatchingType == 'SHA2-256' ) | ternary(tlsa_data_sha256,
          ( rec.tlsaMatchingType == 'SHA2-512' ) | ternary(tlsa_data_sha512, tlsa_data_full) )
      }}
  loop: "{{ delete_tlsa_test_records }}"
  loop_control:
    loop_var: rec
    label: "Create: {{ rec.idx }}-{{ rec.name }}.{{ rec.zone }}"
  register: create_tlsa_results

- name: "Assert TLSA records created"
  ansible.builtin.assert:
    that:
      - (create_tlsa_results.results | map(attribute='changed') | list | unique) == [ true ]

# Phase 2: Check mode - plan deletion
- name: "Plan delete TLSA records (check mode)"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "_443._tcp.{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: TLSA
    tlsaCertificateUsage: "{{ rec.tlsaCertificateUsage }}"
    tlsaSelector: "{{ rec.tlsaSelector }}"
    tlsaMatchingType: "{{ rec.tlsaMatchingType }}"
    tlsaCertificateAssociationData: >-
      {{
        ( rec.tlsaMatchingType == 'SHA2-256' ) | ternary(tlsa_data_sha256,
          ( rec.tlsaMatchingType == 'SHA2-512' ) | ternary(tlsa_data_sha512, tlsa_data_full) )
      }}
  check_mode: true
  loop: "{{ delete_tlsa_test_records }}"
  loop_control:
    loop_var: rec
    label: "PlanDelete: {{ rec.name }}.{{ rec.zone }}"
  register: plan_delete_tlsa_results

- name: "Assert all delete plans report changed"
  ansible.builtin.assert:
    that:
      - (plan_delete_tlsa_results.results | map(attribute='changed') | list | unique) == [ true ]

# Phase 3: Delete the records
- name: "Delete TLSA records"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "_443._tcp.{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: TLSA
    tlsaCertificateUsage: "{{ rec.tlsaCertificateUsage }}"
    tlsaSelector: "{{ rec.tlsaSelector }}"
    tlsaMatchingType: "{{ rec.tlsaMatchingType }}"
    tlsaCertificateAssociationData: >-
      {{
        ( rec.tlsaMatchingType == 'SHA2-256' ) | ternary(tlsa_data_sha256,
          ( rec.tlsaMatchingType == 'SHA2-512' ) | ternary(tlsa_data_sha512, tlsa_data_full) )
      }}
  loop: "{{ delete_tlsa_test_records }}"
  loop_control:
    loop_var: rec
    label: "Delete: {{ rec.idx }}-{{ rec.name }}.{{ rec.zone }}"
  register: delete_tlsa_results

- name: "Assert TLSA records deleted"
  ansible.builtin.assert:
    that:
      - (delete_tlsa_results.results | map(attribute='changed') | list | unique) == [ true ]

# Phase 4: Check mode - plan deletion again (should be no changes)
- name: "Plan delete TLSA records again (check mode, after deletion)"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "_443._tcp.{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: TLSA
    tlsaCertificateUsage: "{{ rec.tlsaCertificateUsage }}"
    tlsaSelector: "{{ rec.tlsaSelector }}"
    tlsaMatchingType: "{{ rec.tlsaMatchingType }}"
    tlsaCertificateAssociationData: >-
      {{
        ( rec.tlsaMatchingType == 'SHA2-256' ) | ternary(tlsa_data_sha256,
          ( rec.tlsaMatchingType == 'SHA2-512' ) | ternary(tlsa_data_sha512, tlsa_data_full) )
      }}
  check_mode: true
  loop: "{{ delete_tlsa_test_records }}"
  loop_control:
    loop_var: rec
    label: "PlanDeleteAgain: {{ rec.name }}.{{ rec.zone }}"
  register: plan_delete_tlsa_again_results

- name: "Assert all delete plans after deletion report no changes"
  ansible.builtin.assert:
    that:
      - (plan_delete_tlsa_again_results.results | map(attribute='changed') | list | unique) == [ false ]

# Phase 5: Verify record doesn't exist with get_record
- name: "Fetch records for absence (get_records)"
  technitium_dns_get_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "{{ rec.zone }}"
  loop: "{{ delete_tlsa_test_records }}"
  loop_control:
    loop_var: rec
    label: "Get(absent): {{ rec.name }}.{{ rec.zone }}"
  register: absent_get_results

- name: Debug absent_get_results
  ansible.builtin.debug:
    var: absent_get_results
  when: debug | default(false)

- name: "Assert absence (no pre-existing TLSA record by name)"
  ansible.builtin.assert:
    that:
      - >-
        (item.records | default([])
         | selectattr('type','equalto','TLSA')
         | selectattr('name','equalto', ('_443._tcp.' ~ item.rec.name ~ '.' ~ item.rec.zone))
         | list | length) == 0
    quiet: true
  loop: "{{ absent_get_results.results }}"
  loop_control:
    label: "AbsentAssert: {{ item.rec.name }}.{{ item.rec.zone }}"

# Phase 6: Idempotency - rerun delete (should be no changes)
- name: "Idempotency: Re-run delete TLSA records"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "_443._tcp.{{ rec.name }}.{{ rec.zone }}"
    zone: "{{ rec.zone }}"
    type: TLSA
    tlsaCertificateUsage: "{{ rec.tlsaCertificateUsage }}"
    tlsaSelector: "{{ rec.tlsaSelector }}"
    tlsaMatchingType: "{{ rec.tlsaMatchingType }}"
    tlsaCertificateAssociationData: >-
      {{
        ( rec.tlsaMatchingType == 'SHA2-256' ) | ternary(tlsa_data_sha256,
          ( rec.tlsaMatchingType == 'SHA2-512' ) | ternary(tlsa_data_sha512, tlsa_data_full) )
      }}
  loop: "{{ delete_tlsa_test_records }}"
  loop_control:
    loop_var: rec
    label: "IdempotentDelete: {{ rec.name }}.{{ rec.zone }}"
  register: idempotent_delete_tlsa_results

- name: "Assert idempotent delete reports no changes"
  ansible.builtin.assert:
    that:
      - (idempotent_delete_tlsa_results.results | map(attribute='changed') | list | unique) == [ false ]

# Phase 7: Negative tests
- name: "Negative: missing required tlsaCertificateAssociationData param"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "_443._tcp.neg-missing-tlsa.{{ primary_sec_zone_name }}"
    zone: "{{ primary_sec_zone_name }}"
    type: TLSA
    tlsaCertificateUsage: PKIX-TA
    tlsaSelector: Cert
    tlsaMatchingType: Full
  register: neg_delete_tlsa_missing_data
  ignore_errors: true

- name: "Assert failure of missing tlsaCertificateAssociationData param"
  ansible.builtin.assert:
    that:
      - neg_delete_tlsa_missing_data.failed
      - "'tlsaCertificateAssociationData' in (neg_delete_tlsa_missing_data.msg | default(''))"

- name: "Negative: unsupported param for TLSA (ipAddress)"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: "{{ technitium_api_token_2 }}"
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "_443._tcp.bad-param-tlsa.{{ primary_sec_zone_name }}"
    zone: "{{ primary_sec_zone_name }}"
    type: TLSA
    tlsaCertificateUsage: PKIX-TA
    tlsaSelector: Cert
    tlsaMatchingType: SHA2-256
    tlsaCertificateAssociationData: "{{ tlsa_data_sha256 }}"
    ipAddress: 192.0.2.55
  register: neg_delete_tlsa_bad_param
  ignore_errors: true

- name: "Assert failure of unsupported param"
  ansible.builtin.assert:
    that:
      - neg_delete_tlsa_bad_param.failed
      - "'ipAddress' in (neg_delete_tlsa_bad_param.msg | default(''))"

- name: "Negative: invalid API token"
  technitium_dns_delete_record:
    api_url: "{{ technitium_api_url_2 | default('http://localhost') }}"
    api_token: BADTOKEN
    api_port: "{{ technitium_api_port_2 | default(5380) }}"
    name: "_443._tcp.bad-token-tlsa.{{ primary_sec_zone_name }}"
    zone: "{{ primary_sec_zone_name }}"
    type: TLSA
    tlsaCertificateUsage: DANE-EE
    tlsaSelector: SPKI
    tlsaMatchingType: SHA2-512
    tlsaCertificateAssociationData: "{{ tlsa_data_sha512 }}"
  register: neg_delete_tlsa_bad_token
  ignore_errors: true

- name: "Assert failure of invalid API token"
  ansible.builtin.assert:
    that:
      - neg_delete_tlsa_bad_token.failed
      - "'Invalid token' in (neg_delete_tlsa_bad_token.msg)"
